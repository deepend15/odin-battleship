{"version":3,"file":"main.js","mappings":"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","sources":["webpack://odin_battleship/./src/player.js","webpack://odin_battleship/./src/gameboard.js","webpack://odin_battleship/./src/ship.js","webpack://odin_battleship/./src/game.js","webpack://odin_battleship/./src/show-enter-player-info-screen.js","webpack://odin_battleship/./src/activate-new-game.js","webpack://odin_battleship/./src/ship-placement-screen-class.js","webpack://odin_battleship/./src/possible-ship-positions.js","webpack://odin_battleship/./src/random-ship-placement.js","webpack://odin_battleship/./src/ship-placement-screen.js","webpack://odin_battleship/./src/display-controller.js","webpack://odin_battleship/./src/options-drop-down-btn.js","webpack://odin_battleship/./src/computer.js"],"sourcesContent":["import { createGameboard } from \"./gameboard.js\";\n\nexport class Player {\n  constructor(name, id, type) {\n    this.name = name;\n    this.id = `Player ${id}`;\n    this.type = type;\n  }\n\n  lastAttack = null;\n  lastAttackResult = null;\n\n  gameboard = createGameboard();\n}\n","import { createShips } from \"./ship.js\";\n\nexport function createGameboard() {\n  const rows = 10;\n  const columns = 10;\n  const board = [];\n  const ships = createShips().getShips();\n\n  for (let i = 0; i < rows; i++) {\n    board[i] = [];\n    for (let j = 0; j < columns; j++) {\n      board[i].push(null);\n    }\n  }\n\n  const getBoard = () => board;\n\n  function placeShip(ship, firstCoordinate, secondCoordinate) {\n    const coordinates = [\n      firstCoordinate[0],\n      firstCoordinate[1],\n      secondCoordinate[0],\n      secondCoordinate[1],\n    ];\n\n    coordinates.forEach((coordinate) => {\n      if (coordinate < 0 || coordinate > 9) {\n        throw new Error(\"Invalid coordinates\");\n      }\n    });\n\n    if (\n      firstCoordinate[0] !== secondCoordinate[0] &&\n      firstCoordinate[1] !== secondCoordinate[1]\n    ) {\n      throw new Error(\"Invalid coordinates\");\n    }\n\n    if (firstCoordinate[0] === secondCoordinate[0]) {\n      if (\n        !(\n          secondCoordinate[1] - firstCoordinate[1] === ship.length - 1 ||\n          (secondCoordinate[1] - firstCoordinate[1]) * -1 === ship.length - 1\n        )\n      ) {\n        throw new Error(\"Invalid coordinates\");\n      }\n    }\n\n    if (firstCoordinate[1] === secondCoordinate[1]) {\n      if (\n        !(\n          secondCoordinate[0] - firstCoordinate[0] === ship.length - 1 ||\n          (secondCoordinate[0] - firstCoordinate[0]) * -1 === ship.length - 1\n        )\n      ) {\n        throw new Error(\"Invalid coordinates\");\n      }\n    }\n\n    const squares = [firstCoordinate];\n\n    let x = firstCoordinate[0];\n    let y = firstCoordinate[1];\n\n    for (let i = 1; i < ship.length - 1; i++) {\n      if (firstCoordinate[0] === secondCoordinate[0]) {\n        if (firstCoordinate[1] < secondCoordinate[1]) y += 1;\n        else y -= 1;\n      } else {\n        if (firstCoordinate[0] < secondCoordinate[0]) x += 1;\n        else x -= 1;\n      }\n      squares.push([x, y]);\n    }\n\n    squares.push(secondCoordinate);\n\n    squares.forEach((square) => {\n      if (board[square[0]][square[1]] !== null) {\n        throw new Error(\"Coordinates already occupied!\");\n      }\n      board[square[0]][square[1]] = [ship.id];\n    });\n  }\n\n  function clearBoard() {\n    board.forEach((row) => {\n      for (let i = 0; i < row.length; i++) {\n        row[i] = null;\n      }\n    });\n  }\n\n  function receiveAttack([x, y]) {\n    const shipIDs = ships.map((ship) => ship.id);\n\n    if (board[x][y] === null) {\n      board[x][y] = [\"miss\"];\n      return;\n    }\n\n    if (board[x][y].includes(\"miss\")) {\n      throw new Error(\"Can't attack this spot\");\n    }\n\n    shipIDs.forEach((id) => {\n      if (board[x][y].includes(id)) {\n        if (board[x][y].includes(\"hit\")) {\n          throw new Error(\"Can't attack this spot\");\n        }\n        const hitShipArray = ships.filter((ship) => ship.id === id);\n        const hitShip = hitShipArray[0];\n        hitShip.hit();\n        board[x][y].push(\"hit\");\n        if (hitShip.isSunk()) {\n          board.forEach((row) => {\n            row.forEach((square) => {\n              if (Array.isArray(square)) {\n                if (square.includes(id)) square.push(\"is sunk\");\n              }\n            });\n          });\n        }\n        return;\n      }\n    });\n  }\n\n  function allShipsSunk() {\n    for (let i = 0; i < ships.length; i++) {\n      if (!ships[i].isSunk()) return false;\n    }\n\n    return true;\n  }\n\n  return {\n    ships,\n    getBoard,\n    placeShip,\n    clearBoard,\n    receiveAttack,\n    allShipsSunk,\n  };\n}\n","export function createShips() {\n  function createShip() {\n    function isSunk() {\n      if (this.hits < this.length) return false;\n      else return true;\n    }\n\n    function hit() {\n      if (!this.isSunk()) this.hits += 1;\n    }\n\n    let hits = 0;\n\n    let placed = false;\n\n    return { isSunk, hit, hits, placed };\n  }\n\n  const ships = [\n    Object.assign({}, createShip(), { length: 5, id: \"5\" }),\n    Object.assign({}, createShip(), { length: 4, id: \"4\" }),\n    Object.assign({}, createShip(), { length: 3, id: \"3A\" }),\n    Object.assign({}, createShip(), { length: 3, id: \"3B\" }),\n    Object.assign({}, createShip(), { length: 2, id: \"2\" }),\n  ];\n\n  const getShips = () => ships;\n\n  return { getShips };\n}\n","import { Player } from \"./player.js\";\n\nexport const game = (function () {\n  let player1;\n  let player2;\n  let activePlayer;\n  let opponent;\n\n  const getPlayer1 = () => player1;\n  const getPlayer2 = () => player2;\n  const getActivePlayer = () => activePlayer;\n  const getOpponent = () => opponent;\n\n  const switchPlayerTurn = () => {\n    if (activePlayer === player1) {\n      activePlayer = player2;\n      opponent = player1;\n    } else {\n      activePlayer = player1;\n      opponent = player2;\n    }\n  };\n\n  let gameStatus = \"new\";\n  const getGameStatus = () => gameStatus;\n  const setGameStatus = (value) => (gameStatus = value);\n\n  const startGame = (\n    player1Name,\n    player2name = \"Computer\",\n    player2type = \"computer\",\n  ) => {\n    player1 = new Player(player1Name, 1, \"human\");\n    player2 = new Player(player2name, 2, player2type);\n\n    activePlayer = player1;\n    opponent = player2;\n  };\n\n  let winner;\n  const setWinner = (player) => (winner = player);\n  const getWinner = () => winner;\n\n  return {\n    getPlayer1,\n    getPlayer2,\n    getActivePlayer,\n    getOpponent,\n    switchPlayerTurn,\n    getGameStatus,\n    setGameStatus,\n    startGame,\n    setWinner,\n    getWinner,\n  };\n})();\n","import { game } from \"./game.js\";\nimport { displayController } from \"./display-controller.js\";\n\nexport function showEnterPlayerInfoScreen(e) {\n  const newGameDialog = document.querySelector(\"#new-game-dialog\");\n\n  let numberOfPlayers;\n  if (e.target.textContent === \"1 player\") numberOfPlayers = 1;\n  else numberOfPlayers = 2;\n\n  newGameDialog.textContent = \"\";\n\n  const cancelBtn = document.createElement(\"button\");\n  cancelBtn.classList.add(\"dialog-cancel-btn\");\n  cancelBtn.textContent = \"X\";\n  newGameDialog.append(cancelBtn);\n\n  cancelBtn.addEventListener(\"click\", () => newGameDialog.close());\n\n  const form = document.createElement(\"form\");\n\n  const enterPlayer1 = document.createElement(\"p\");\n  const p1Label = document.createElement(\"label\");\n  p1Label.setAttribute(\"for\", \"p1-name\");\n  let firstWord;\n  if (numberOfPlayers === 1) firstWord = \"Your \";\n  else firstWord = \"Player 1 \";\n  p1Label.textContent = firstWord + \"name:\";\n  const p1Input = document.createElement(\"input\");\n  p1Input.setAttribute(\"type\", \"text\");\n  p1Input.setAttribute(\"id\", \"p1-name\");\n  p1Input.setAttribute(\"name\", \"p1-name\");\n  p1Input.setAttribute(\"placeholder\", \"Player 1\");\n  p1Input.setAttribute(\"required\", \"\");\n  enterPlayer1.append(p1Label, p1Input);\n  form.append(enterPlayer1);\n\n  let p2Input;\n\n  if (numberOfPlayers === 2) {\n    const enterPlayer2 = document.createElement(\"p\");\n    const p2Label = document.createElement(\"label\");\n    p2Label.setAttribute(\"for\", \"p2-name\");\n    p2Label.textContent = \"Player 2 name:\";\n    p2Input = document.createElement(\"input\");\n    p2Input.setAttribute(\"type\", \"text\");\n    p2Input.setAttribute(\"id\", \"p2-name\");\n    p2Input.setAttribute(\"name\", \"p2-name\");\n    p2Input.setAttribute(\"placeholder\", \"Player 2\");\n    p2Input.setAttribute(\"required\", \"\");\n    enterPlayer2.append(p2Label, p2Input);\n    form.append(enterPlayer2);\n  }\n\n  const okButton = document.createElement(\"button\");\n  okButton.textContent = \"OK\";\n  okButton.setAttribute(\"formmethod\", \"dialog\");\n  form.append(okButton);\n\n  okButton.addEventListener(\"click\", () => {\n    if (p1Input.value === \"\") p1Input.value = \"Player 1\";\n    if (numberOfPlayers === 2) {\n      if (p2Input.value === \"\") p2Input.value = \"Player 2\";\n    }\n\n    if (numberOfPlayers === 1) game.startGame(p1Input.value);\n    else game.startGame(p1Input.value, p2Input.value, \"human\");\n    game.setGameStatus(\"ship-placement\");\n    displayController.updateScreen();\n  });\n\n  newGameDialog.append(form);\n}\n","import { showEnterPlayerInfoScreen } from \"./show-enter-player-info-screen.js\";\n\nexport function activateNewGame() {\n  const newGameDialog = document.querySelector(\"#new-game-dialog\");\n\n  newGameDialog.textContent = \"\";\n\n  const cancelBtn = document.createElement(\"button\");\n  cancelBtn.classList.add(\"dialog-cancel-btn\");\n  cancelBtn.textContent = \"X\";\n  newGameDialog.append(cancelBtn);\n\n  cancelBtn.addEventListener(\"click\", () => newGameDialog.close());\n\n  const chooseNumberOfPlayersDiv = document.createElement(\"div\");\n  chooseNumberOfPlayersDiv.classList.add(\"choose-players-div\");\n\n  const choosePlayersText = document.createElement(\"p\");\n  choosePlayersText.textContent = \"Choose the number of players:\";\n\n  const buttonsDiv = document.createElement(\"div\");\n  buttonsDiv.classList.add(\"player-buttons-div\");\n  const onePlayerButton = document.createElement(\"button\");\n  onePlayerButton.textContent = \"1 player\";\n  const twoPlayerButton = document.createElement(\"button\");\n  twoPlayerButton.textContent = \"2 players\";\n  buttonsDiv.append(onePlayerButton, twoPlayerButton);\n\n  chooseNumberOfPlayersDiv.append(choosePlayersText, buttonsDiv);\n  newGameDialog.append(chooseNumberOfPlayersDiv);\n\n  onePlayerButton.addEventListener(\"click\", showEnterPlayerInfoScreen);\n  twoPlayerButton.addEventListener(\"click\", showEnterPlayerInfoScreen);\n\n  newGameDialog.showModal();\n}\n","// import { game } from \"./game\";\n\nexport class PlaceShipmentScreen {\n  constructor(player, status) {\n    this.player = player;\n    this.status = status;\n  }\n\n  activeShip = null;\n  selectedStartingSquare = null;\n}\n","export function possiblePositions(ship, startingSquare) {\n  const firstCoordinate = startingSquare[0];\n  const secondCoordinate = startingSquare[1];\n\n  const shipPositions = {\n    firstPosition: null,\n    secondPosition: null,\n    thirdPosition: null,\n    fourthPosition: null,\n  };\n\n  let currentShip = [];\n\n  // get horizontal-right ship position\n\n  if (secondCoordinate + ship.length - 1 <= 9) {\n    for (let i = secondCoordinate; i < secondCoordinate + ship.length; i++) {\n      currentShip.push([firstCoordinate, i]);\n    }\n    shipPositions.firstPosition = currentShip;\n  }\n\n  // get horizontal-left ship position\n\n  if (secondCoordinate - ship.length + 1 >= 0) {\n    currentShip = [];\n    for (let i = secondCoordinate; i > secondCoordinate - ship.length; i--) {\n      currentShip.push([firstCoordinate, i]);\n    }\n    shipPositions.secondPosition = currentShip;\n  }\n\n  // get vertical-down ship position\n\n  if (firstCoordinate + ship.length - 1 <= 9) {\n    currentShip = [];\n    for (let i = firstCoordinate; i < firstCoordinate + ship.length; i++) {\n      currentShip.push([i, secondCoordinate]);\n    }\n    shipPositions.thirdPosition = currentShip;\n  }\n\n  // get vertical-up ship position\n\n  if (firstCoordinate - ship.length + 1 >= 0) {\n    currentShip = [];\n    for (let i = firstCoordinate; i > firstCoordinate - ship.length; i--) {\n      currentShip.push([i, secondCoordinate]);\n    }\n    shipPositions.fourthPosition = currentShip;\n  }\n\n  return shipPositions;\n}\n","import { possiblePositions } from \"./possible-ship-positions.js\";\n\nexport function randomShipPlacement(player) {\n  const playerGameboard = player.gameboard;\n  const playerBoard = playerGameboard.getBoard();\n\n  function getRandomStartingSquare() {\n    function isValid(square) {\n      if (playerBoard[square[0]][square[1]] === null) return true;\n      return false;\n    }\n\n    const startingSquareQueue = [];\n\n    function generateRandomStartingSquare() {\n      const startingX = Math.floor(Math.random() * 10);\n      const startingY = Math.floor(Math.random() * 10);\n      startingSquareQueue.push([startingX, startingY]);\n    }\n\n    generateRandomStartingSquare();\n\n    let randomStartingSquare;\n\n    while (startingSquareQueue.length !== 0) {\n      if (isValid(startingSquareQueue[0])) {\n        randomStartingSquare = startingSquareQueue.shift();\n      } else {\n        generateRandomStartingSquare();\n        startingSquareQueue.shift();\n      }\n    }\n\n    return randomStartingSquare;\n  }\n\n  function placeInRandomPosition(ship, startingSquare = null) {\n    function getRandomPosition(startingSquare) {\n      const shipPossiblePositionsObject = possiblePositions(\n        ship,\n        startingSquare,\n      );\n\n      const possiblePositionArrays = Object.values(shipPossiblePositionsObject);\n      const filteredPossiblePositionArrays = possiblePositionArrays.filter(\n        (array) => array !== null,\n      );\n      const numberOfValidPossiblePositions =\n        filteredPossiblePositionArrays.length;\n\n      const randomIndex = Math.floor(\n        Math.random() * numberOfValidPossiblePositions,\n      );\n      return filteredPossiblePositionArrays[randomIndex];\n    }\n\n    function occupied(position) {\n      let answer = false;\n      position.forEach((value) => {\n        if (playerBoard[value[0]][value[1]] !== null) {\n          answer = true;\n        }\n      });\n      return answer;\n    }\n\n    function getFinalSquare(position) {\n      return position[position.length - 1];\n    }\n\n    const queue = [];\n\n    let randomStartingSquare;\n    if (startingSquare === null)\n      randomStartingSquare = getRandomStartingSquare();\n\n    let randomPosition;\n    if (startingSquare === null)\n      randomPosition = getRandomPosition(randomStartingSquare);\n    else randomPosition = getRandomPosition(startingSquare);\n\n    let finalSquare;\n\n    queue.push(randomPosition);\n\n    while (queue.length !== 0) {\n      if (!occupied(queue[0])) {\n        finalSquare = getFinalSquare(queue[0]);\n        if (startingSquare === null)\n          playerGameboard.placeShip(ship, randomStartingSquare, finalSquare);\n        else playerGameboard.placeShip(ship, startingSquare, finalSquare);\n        ship.placed = true;\n        queue.shift();\n      } else {\n        if (startingSquare === null) {\n          randomStartingSquare = getRandomStartingSquare();\n          randomPosition = getRandomPosition(randomStartingSquare);\n          queue.push(randomPosition);\n          queue.shift();\n        } else {\n          randomPosition = getRandomPosition(startingSquare);\n          queue.push(randomPosition);\n          queue.shift();\n        }\n      }\n    }\n  }\n\n  return { placeInRandomPosition };\n}\n","import { game } from \"./game.js\";\nimport { possiblePositions } from \"./possible-ship-positions.js\";\nimport { randomShipPlacement } from \"./random-ship-placement.js\";\nimport { displayController } from \"./display-controller.js\";\nimport { PlaceShipmentScreen } from \"./ship-placement-screen-class.js\";\n\nexport function showShipPlacementScreen(playerScreen) {\n  const player = playerScreen.player;\n  const player2 = game.getPlayer2();\n  const playerShips = player.gameboard.ships;\n  const screenStatus = playerScreen.status;\n  const activeShip = playerScreen.activeShip;\n\n  const gameDiv = document.querySelector(\".game-div\");\n\n  // create column and row label arrays\n\n  const columnLabelsText = \"ABCDEFGHIJ\".split(\"\");\n  const rowLabelsText = \"1,2,3,4,5,6,7,8,9,10\".split(\",\");\n\n  // clear gameDiv & h2 if present\n\n  gameDiv.textContent = \"\";\n  if (gameDiv.previousElementSibling.nodeName === \"H2\") {\n    gameDiv.previousElementSibling.remove();\n  }\n\n  // create ship-placement h2\n\n  const h2 = document.createElement(\"h2\");\n  h2.textContent = `${player.name}, place your ships on your board!`;\n  gameDiv.before(h2);\n\n  // create 'ship placement section' div\n\n  const shipPlacementSection = document.createElement(\"div\");\n  shipPlacementSection.classList.add(\"ship-placement-section\");\n  gameDiv.append(shipPlacementSection);\n\n  // create 'ship placement text' div\n\n  const shipPlacementTextDiv = document.createElement(\"div\");\n  shipPlacementTextDiv.classList.add(\"ship-placement-text-div\");\n  const shipPlacementLines = document.createElement(\"div\");\n  shipPlacementLines.classList.add(\"ship-placement-lines\");\n  const line1 = document.createElement(\"p\");\n\n  switch (screenStatus) {\n    case \"click-ship\":\n      line1.textContent = \"Click on a ship:\";\n      break;\n    case \"starting-square\":\n      line1.textContent = \"Click a starting square on your board.\";\n      break;\n    case \"ending-square\":\n      line1.textContent =\n        \"Click an available position on your board to place your ship.\";\n      break;\n    case \"next-player-ready\":\n      line1.textContent = `Click \"Continue\" to allow ${player2.name} to place their ships!`;\n      break;\n    case \"game-ready\":\n      line1.textContent = 'Click \"Start Game\" to start the game!';\n      break;\n  }\n\n  shipPlacementLines.append(line1);\n  shipPlacementTextDiv.append(shipPlacementLines);\n\n  shipPlacementSection.append(shipPlacementTextDiv);\n\n  // create 'ship selection' div\n\n  const shipSelectionDiv = document.createElement(\"div\");\n  shipSelectionDiv.classList.add(\"ship-selection-div\");\n\n  playerShips.forEach((ship) => {\n    const shipSelectionLine = document.createElement(\"div\");\n    shipSelectionLine.classList.add(\"ship-selection-line\");\n\n    const shipButton = document.createElement(\"button\");\n    shipButton.classList.add(\"ship-selection-button\");\n\n    if (activeShip !== null) {\n      if (ship.id === activeShip.id) shipButton.classList.add(\"active-ship\");\n      else shipButton.classList.add(\"inactive-ship\");\n    }\n\n    const shipText = document.createElement(\"p\");\n    switch (ship.id) {\n      case \"5\":\n        shipText.textContent = \"Carrier:\";\n        break;\n      case \"4\":\n        shipText.textContent = \"Battleship:\";\n        break;\n      case \"3A\":\n        shipText.textContent = \"Destroyer:\";\n        break;\n      case \"3B\":\n        shipText.textContent = \"Submarine:\";\n        break;\n      case \"2\":\n        shipText.textContent = \"Patrol Boat:\";\n        break;\n    }\n\n    const displayedShip = document.createElement(\"div\");\n    displayedShip.classList.add(\"ship-div\");\n    for (let i = 0; i < ship.length; i++) {\n      const squareDiv = document.createElement(\"div\");\n      squareDiv.textContent = ship.length.toString();\n      displayedShip.append(squareDiv);\n    }\n\n    shipButton.append(shipText, displayedShip);\n    shipSelectionLine.append(shipButton);\n\n    const placedText = document.createElement(\"p\");\n    let placedSymbol;\n    if (ship.placed === true) {\n      placedText.classList.add(\"placed-text-placed\");\n      placedSymbol = \"\\u2705\";\n    } else {\n      placedText.classList.add(\"placed-text-not-placed\");\n      placedSymbol = \"\\uD83D\\uDDD9\";\n    }\n    placedText.textContent = placedSymbol + \" placed\";\n    shipSelectionLine.append(placedText);\n\n    shipSelectionDiv.append(shipSelectionLine);\n  });\n\n  shipPlacementSection.append(shipSelectionDiv);\n\n  if (\n    screenStatus === \"click-ship\" ||\n    screenStatus === \"game-ready\" ||\n    screenStatus === \"next-player-ready\"\n  ) {\n    const shipButtons = document.querySelectorAll(\".ship-selection-button\");\n    shipButtons.forEach((shipButton) => {\n      function getMatchingShip() {\n        let selectedID;\n        const shipText = shipButton.firstElementChild.textContent;\n        switch (shipText) {\n          case \"Carrier:\":\n            selectedID = \"5\";\n            break;\n          case \"Battleship:\":\n            selectedID = \"4\";\n            break;\n          case \"Destroyer:\":\n            selectedID = \"3A\";\n            break;\n          case \"Submarine:\":\n            selectedID = \"3B\";\n            break;\n          case \"Patrol Boat:\":\n            selectedID = \"2\";\n            break;\n        }\n        const matchingShip = playerShips.filter(\n          (ship) => ship.id === selectedID,\n        )[0];\n        return matchingShip;\n      }\n\n      if (\n        shipButton.nextElementSibling.classList.contains(\"placed-text-placed\")\n      ) {\n        shipButton.classList.add(\"inactive-ship\");\n        const editShipButton = document.createElement(\"button\");\n        editShipButton.classList.add(\"edit-ship-button\");\n        editShipButton.textContent = \"re-place\";\n        shipButton.parentElement.append(editShipButton);\n        editShipButton.addEventListener(\"click\", () => {\n          const matchingShip = getMatchingShip();\n          playerBoard.forEach((row) => {\n            for (let i = 0; i < row.length; i++) {\n              if (Array.isArray(row[i])) {\n                if (row[i].includes(matchingShip.id)) {\n                  row[i] = null;\n                }\n              }\n            }\n          });\n          matchingShip.placed = false;\n          playerScreen.activeShip = matchingShip;\n          playerScreen.status = \"starting-square\";\n          showShipPlacementScreen(playerScreen);\n        });\n      } else {\n        if (screenStatus === \"click-ship\") {\n          function toggleShipHover(e) {\n            e.target.classList.toggle(\"ship-hover\");\n          }\n\n          shipButton.addEventListener(\"mouseenter\", toggleShipHover);\n          shipButton.addEventListener(\"mouseleave\", toggleShipHover);\n\n          shipButton.addEventListener(\"click\", () => {\n            playerScreen.status = \"starting-square\";\n            playerScreen.activeShip = getMatchingShip();\n            showShipPlacementScreen(playerScreen);\n          });\n        }\n      }\n    });\n  }\n\n  const shipPlacementButtons = document.createElement(\"div\");\n  shipPlacementButtons.classList.add(\"ship-placement-buttons\");\n\n  if (screenStatus === \"game-ready\") {\n    const startGameBtn = document.createElement(\"button\");\n    startGameBtn.classList.add(\"start-game-button\");\n    startGameBtn.textContent = \"Start Game\";\n    shipPlacementButtons.append(startGameBtn);\n    startGameBtn.addEventListener(\"click\", () => {\n      if (player2.type === \"computer\") {\n        const computerShips = player2.gameboard.ships;\n        computerShips.forEach((ship) =>\n          randomShipPlacement(player2).placeInRandomPosition(ship),\n        );\n      }\n      game.setGameStatus(\"player-turn\");\n      displayController.updateScreen();\n    });\n  } else if (screenStatus === \"next-player-ready\") {\n    const continueBtn = document.createElement(\"button\");\n    continueBtn.classList.add(\"start-game-button\");\n    continueBtn.textContent = \"Continue\";\n    shipPlacementButtons.append(continueBtn);\n    continueBtn.addEventListener(\"click\", () => {\n      const mainContainer = document.querySelector(\".main-container\");\n      const nextPlayerShipPlacementDialog = document.createElement(\"dialog\");\n      nextPlayerShipPlacementDialog.id = \"next-player-ship-placement-dialog\";\n      const nextPlayerShipPlacementDialogDiv = document.createElement(\"div\");\n      const player1Name = document.createElement(\"span\");\n      player1Name.classList.add(\"next-player-dialog-player1-name\");\n      player1Name.textContent = player.name;\n      const player2Name = document.createElement(\"span\");\n      player2Name.classList.add(\"next-player-dialog-player2-name\");\n      player2Name.textContent = player2.name;\n      const clonedPlayer2Name = player2Name.cloneNode(true);\n      const nextPlayerShipPlacementDialogText1 = document.createElement(\"p\");\n      nextPlayerShipPlacementDialogText1.append(\n        player1Name,\n        \", pass the screen to \",\n      );\n      nextPlayerShipPlacementDialogText1.append(\n        player2Name,\n        \" so they can place their ships!\",\n      );\n      const nextPlayerShipPlacementDialogText2 = document.createElement(\"p\");\n      nextPlayerShipPlacementDialogText2.append(\n        clonedPlayer2Name,\n        \", click OK when you're ready to continue!\",\n      );\n      const nextPlayerShipPlacementDialogButtons =\n        document.createElement(\"div\");\n      nextPlayerShipPlacementDialogButtons.classList.add(\n        \"next-player-dialog-buttons\",\n      );\n      const cancelBtn = document.createElement(\"button\");\n      cancelBtn.textContent = \"Cancel\";\n      const okBtn = document.createElement(\"button\");\n      okBtn.textContent = \"OK\";\n      nextPlayerShipPlacementDialogButtons.append(cancelBtn, okBtn);\n      nextPlayerShipPlacementDialogDiv.append(\n        nextPlayerShipPlacementDialogText1,\n        nextPlayerShipPlacementDialogText2,\n        nextPlayerShipPlacementDialogButtons,\n      );\n      nextPlayerShipPlacementDialog.append(nextPlayerShipPlacementDialogDiv);\n      mainContainer.append(nextPlayerShipPlacementDialog);\n\n      cancelBtn.addEventListener(\"click\", () => {\n        nextPlayerShipPlacementDialog.close();\n        nextPlayerShipPlacementDialog.remove();\n      });\n\n      okBtn.addEventListener(\"click\", () => {\n        nextPlayerShipPlacementDialog.close();\n        nextPlayerShipPlacementDialog.remove();\n        const player2PlaceShipmentScreen = new PlaceShipmentScreen(\n          player2,\n          \"click-ship\",\n        );\n        showShipPlacementScreen(player2PlaceShipmentScreen);\n      });\n\n      nextPlayerShipPlacementDialog.showModal();\n    });\n  } else {\n    const shipPlacementRandomBtn = document.createElement(\"button\");\n    shipPlacementRandomBtn.classList.add(\"ship-placement-random-button\");\n\n    if (screenStatus === \"click-ship\") {\n      shipPlacementRandomBtn.textContent = \"Place my ships for me!\";\n      shipPlacementRandomBtn.addEventListener(\"click\", () => {\n        playerShips.forEach((ship) => {\n          if (!ship.placed)\n            randomShipPlacement(player).placeInRandomPosition(ship);\n        });\n        playerScreen.activeShip = null;\n        playerScreen.selectedStartingSquare = null;\n        if (\n          player2.type === \"computer\" ||\n          (player2.type === \"human\" && player.id === \"Player 2\")\n        ) {\n          playerScreen.status = \"game-ready\";\n        } else playerScreen.status = \"next-player-ready\";\n\n        showShipPlacementScreen(playerScreen);\n      });\n    } else {\n      shipPlacementRandomBtn.textContent = \"Place this ship for me!\";\n      if (screenStatus === \"starting-square\") {\n        shipPlacementRandomBtn.addEventListener(\"click\", () => {\n          randomShipPlacement(player).placeInRandomPosition(activeShip);\n          activeShip.placed = true;\n          playerScreen.activeShip = null;\n          playerScreen.selectedStartingSquare = null;\n          const nonPlacedShips = playerShips.filter((ship) => !ship.placed);\n          if (nonPlacedShips.length === 0) {\n            if (\n              player2.type === \"computer\" ||\n              (player2.type === \"human\" && player.id === \"Player 2\")\n            ) {\n              playerScreen.status = \"game-ready\";\n            } else playerScreen.status = \"next-player-ready\";\n          } else playerScreen.status = \"click-ship\";\n          showShipPlacementScreen(playerScreen);\n        });\n      }\n      if (screenStatus === \"ending-square\") {\n        shipPlacementRandomBtn.addEventListener(\"click\", () => {\n          randomShipPlacement(player).placeInRandomPosition(\n            activeShip,\n            playerScreen.selectedStartingSquare,\n          );\n          activeShip.placed = true;\n          playerScreen.activeShip = null;\n          playerScreen.selectedStartingSquare = null;\n          const nonPlacedShips = playerShips.filter((ship) => !ship.placed);\n          if (nonPlacedShips.length === 0) {\n            if (\n              player2.type === \"computer\" ||\n              (player2.type === \"human\" && player.id === \"Player 2\")\n            ) {\n              playerScreen.status = \"game-ready\";\n            } else playerScreen.status = \"next-player-ready\";\n          } else playerScreen.status = \"click-ship\";\n          showShipPlacementScreen(playerScreen);\n        });\n      }\n    }\n\n    shipPlacementButtons.append(shipPlacementRandomBtn);\n  }\n\n  const resetBoardButton = document.createElement(\"button\");\n  resetBoardButton.classList.add(\"reset-board-button\");\n  resetBoardButton.textContent = \"Reset board\";\n  shipPlacementButtons.append(resetBoardButton);\n\n  resetBoardButton.addEventListener(\"click\", () => {\n    player.gameboard.clearBoard();\n    playerShips.forEach((ship) => (ship.placed = false));\n    playerScreen.activeShip = null;\n    playerScreen.selectedStartingSquare = null;\n    playerScreen.status = \"click-ship\";\n    showShipPlacementScreen(playerScreen);\n  });\n\n  shipPlacementSection.append(shipPlacementButtons);\n\n  // create board\n\n  const playerBoard = player.gameboard.getBoard();\n\n  const playerBoardDiv = document.createElement(\"div\");\n  playerBoardDiv.classList.add(\"board-div\");\n  const columnLabels = document.createElement(\"div\");\n  columnLabels.classList.add(\"column-labels\");\n  for (let i = 0; i < 10; i++) {\n    const p = document.createElement(\"p\");\n    p.textContent = columnLabelsText[i];\n    columnLabels.append(p);\n  }\n  const rowLabels = document.createElement(\"div\");\n  rowLabels.classList.add(\"row-labels\");\n  for (let i = 0; i < 10; i++) {\n    const p = document.createElement(\"p\");\n    p.textContent = rowLabelsText[i];\n    rowLabels.append(p);\n  }\n  const blankBoardDiv = document.createElement(\"div\");\n  blankBoardDiv.classList.add(\"board\");\n  playerBoardDiv.append(columnLabels, rowLabels, blankBoardDiv);\n\n  playerBoard.forEach((row, index) => {\n    let rowIndex = index;\n    row.forEach((square, index) => {\n      const newSquare = document.createElement(\"div\");\n      newSquare.classList.add(\"square\");\n      newSquare.dataset.row = rowIndex;\n      newSquare.dataset.column = index;\n\n      if (square !== null) {\n        if (square.includes(\"3A\") || square.includes(\"3B\"))\n          newSquare.textContent = \"3\";\n        else newSquare.textContent = square[0];\n      }\n\n      blankBoardDiv.append(newSquare);\n\n      if (\n        screenStatus === \"game-ready\" ||\n        screenStatus === \"next-player-ready\"\n      ) {\n        if (!(newSquare.textContent === \"\")) {\n          newSquare.classList.add(\"active-player-ship\");\n        }\n      }\n\n      if (screenStatus === \"ending-square\") {\n        const newSquareCoordinates = [\n          Number(newSquare.dataset.row),\n          Number(newSquare.dataset.column),\n        ];\n\n        if (\n          newSquareCoordinates[0] === playerScreen.selectedStartingSquare[0] &&\n          newSquareCoordinates[1] === playerScreen.selectedStartingSquare[1]\n        ) {\n          newSquare.classList.add(\"neutral-square\");\n        } else {\n          const startingSquarePossiblePositions = possiblePositions(\n            activeShip,\n            playerScreen.selectedStartingSquare,\n          );\n\n          function isIn(smallArray, largeArray) {\n            const match = largeArray.filter(\n              (array) =>\n                array[0] === smallArray[0] && array[1] === smallArray[1],\n            );\n            if (match.length !== 0) return true;\n            return false;\n          }\n\n          function occupied(position) {\n            let answer = false;\n            position.forEach((value) => {\n              if (playerBoard[value[0]][value[1]] !== null) {\n                answer = true;\n              }\n            });\n            return answer;\n          }\n\n          if (\n            startingSquarePossiblePositions.firstPosition !== null &&\n            isIn(\n              newSquareCoordinates,\n              startingSquarePossiblePositions.firstPosition,\n            ) &&\n            !occupied(startingSquarePossiblePositions.firstPosition)\n          ) {\n            newSquare.classList.add(\"position-1\");\n          } else if (\n            startingSquarePossiblePositions.secondPosition !== null &&\n            isIn(\n              newSquareCoordinates,\n              startingSquarePossiblePositions.secondPosition,\n            ) &&\n            !occupied(startingSquarePossiblePositions.secondPosition)\n          ) {\n            newSquare.classList.add(\"position-2\");\n          } else if (\n            startingSquarePossiblePositions.thirdPosition !== null &&\n            isIn(\n              newSquareCoordinates,\n              startingSquarePossiblePositions.thirdPosition,\n            ) &&\n            !occupied(startingSquarePossiblePositions.thirdPosition)\n          ) {\n            newSquare.classList.add(\"position-3\");\n          } else if (\n            startingSquarePossiblePositions.fourthPosition !== null &&\n            isIn(\n              newSquareCoordinates,\n              startingSquarePossiblePositions.fourthPosition,\n            ) &&\n            !occupied(startingSquarePossiblePositions.fourthPosition)\n          ) {\n            newSquare.classList.add(\"position-4\");\n          } else {\n            newSquare.classList.add(\"inactive-square\");\n          }\n        }\n      }\n    });\n  });\n\n  gameDiv.append(playerBoardDiv);\n\n  if (screenStatus === \"click-ship\")\n    playerBoardDiv.classList.add(\"inactive-board\");\n  if (screenStatus === \"starting-square\") {\n    const boardSquares = document.querySelectorAll(\".square\");\n\n    function toggleSquareHover(e) {\n      e.target.classList.toggle(\"hover\");\n    }\n\n    boardSquares.forEach((square) => {\n      if (square.textContent === \"\") {\n        square.addEventListener(\"mouseover\", toggleSquareHover);\n        square.addEventListener(\"mouseout\", toggleSquareHover);\n\n        square.addEventListener(\"click\", (e) => {\n          const startingSquare = [\n            Number(e.target.dataset.row),\n            Number(e.target.dataset.column),\n          ];\n\n          function isValid(startingSquare) {\n            const startingSquarePossiblePositionsObject = possiblePositions(\n              activeShip,\n              startingSquare,\n            );\n            const startingSquarePossiblePositions = Object.values(\n              startingSquarePossiblePositionsObject,\n            );\n            const validStartingSquarePossiblePositions =\n              startingSquarePossiblePositions.filter((array) => array !== null);\n\n            function occupied(position) {\n              let answer = false;\n              position.forEach((value) => {\n                if (playerBoard[value[0]][value[1]] !== null) {\n                  answer = true;\n                }\n              });\n              return answer;\n            }\n\n            const occupiedValidPositions = [];\n\n            validStartingSquarePossiblePositions.forEach((position) => {\n              if (occupied(position)) {\n                occupiedValidPositions.push(position);\n              }\n            });\n\n            if (\n              occupiedValidPositions.length ===\n              validStartingSquarePossiblePositions.length\n            )\n              return false;\n            else return true;\n          }\n          if (isValid(startingSquare)) {\n            playerScreen.selectedStartingSquare = startingSquare;\n            playerScreen.status = \"ending-square\";\n            showShipPlacementScreen(playerScreen);\n          } else {\n            const shipPlacementLines = document.querySelector(\n              \".ship-placement-lines\",\n            );\n            shipPlacementLines.textContent =\n              \"Invalid square! Choose another starting square.\";\n          }\n        });\n      } else square.classList.add(\"active-player-ship\");\n    });\n  }\n  if (screenStatus === \"ending-square\") {\n    let position1Squares = [];\n    let position2Squares = [];\n    let position3Squares = [];\n    let position4Squares = [];\n\n    const boardSquares = document.querySelectorAll(\".square\");\n\n    boardSquares.forEach((square) => {\n      if (square.classList.contains(\"position-1\"))\n        position1Squares.push(square);\n      if (square.classList.contains(\"position-2\"))\n        position2Squares.push(square);\n      if (square.classList.contains(\"position-3\"))\n        position3Squares.push(square);\n      if (square.classList.contains(\"position-4\"))\n        position4Squares.push(square);\n    });\n\n    const positionSquareGroups = [\n      position1Squares,\n      position2Squares,\n      position3Squares,\n      position4Squares,\n    ];\n\n    positionSquareGroups.forEach((group) => {\n      if (group.length !== 0) {\n        group.forEach((square) => {\n          square.addEventListener(\"mouseover\", () => {\n            const neutralSquare = document.querySelector(\".neutral-square\");\n            neutralSquare.classList.toggle(\"position-group-hover\");\n            neutralSquare.textContent = activeShip.length;\n            group.forEach((square) => {\n              square.classList.toggle(\"position-group-hover\");\n              square.textContent = activeShip.length;\n            });\n          });\n          square.addEventListener(\"mouseout\", () => {\n            const neutralSquare = document.querySelector(\".neutral-square\");\n            neutralSquare.classList.toggle(\"position-group-hover\");\n            neutralSquare.textContent = \"\";\n            group.forEach((square) => {\n              square.classList.toggle(\"position-group-hover\");\n              square.textContent = \"\";\n            });\n          });\n          square.addEventListener(\"click\", () => {\n            const selectedSquares = document.querySelectorAll(\n              \".position-group-hover\",\n            );\n            const firstSquare = selectedSquares[0];\n            const lastSquare = selectedSquares[selectedSquares.length - 1];\n            player.gameboard.placeShip(\n              activeShip,\n              [\n                Number(firstSquare.dataset.row),\n                Number(firstSquare.dataset.column),\n              ],\n              [\n                Number(lastSquare.dataset.row),\n                Number(lastSquare.dataset.column),\n              ],\n            );\n            const matchingShip = playerShips.filter(\n              (ship) => ship.id === activeShip.id,\n            )[0];\n            matchingShip.placed = true;\n            playerScreen.activeShip = null;\n            playerScreen.selectedStartingSquare = null;\n\n            const nonPlacedShips = playerShips.filter((ship) => !ship.placed);\n            if (nonPlacedShips.length === 0) {\n              if (\n                player2.type === \"computer\" ||\n                (player2.type === \"human\" && player.id === \"Player 2\")\n              ) {\n                playerScreen.status = \"game-ready\";\n              } else playerScreen.status = \"next-player-ready\";\n            } else playerScreen.status = \"click-ship\";\n\n            showShipPlacementScreen(playerScreen);\n          });\n        });\n      }\n    });\n  }\n}\n","import { game } from \"./game.js\";\nimport { activateNewGame } from \"./activate-new-game.js\";\nimport { PlaceShipmentScreen } from \"./ship-placement-screen-class.js\";\nimport { showShipPlacementScreen } from \"./ship-placement-screen.js\";\nimport { createAndAddOptionsButton } from \"./options-drop-down-btn.js\";\nimport { computer } from \"./computer.js\";\n\nexport const displayController = (function () {\n  const updateScreen = () => {\n    window.scrollTo(0, 0);\n\n    const gameDiv = document.querySelector(\".game-div\");\n    const topLineMenuDiv = document.querySelector(\".top-line-menu-div\");\n    const bottomDiv = document.querySelector(\".bottom-div\");\n\n    // create column and row label arrays\n\n    const columnLabelsText = \"ABCDEFGHIJ\".split(\"\");\n    const rowLabelsText = \"1,2,3,4,5,6,7,8,9,10\".split(\",\");\n\n    // clear h2, gameDiv, topLineMenuDiv, & opponent ships div\n\n    if (gameDiv.previousElementSibling.nodeName === \"H2\") {\n      gameDiv.previousElementSibling.remove();\n    }\n    gameDiv.textContent = \"\";\n    topLineMenuDiv.textContent = \"\";\n    bottomDiv.textContent = \"\";\n\n    // create initial page load display\n\n    if (game.getGameStatus() === \"new\") {\n      const newGameButton = document.createElement(\"button\");\n      newGameButton.textContent = \"New game\";\n      gameDiv.before(newGameButton);\n\n      newGameButton.addEventListener(\"click\", activateNewGame);\n\n      const generalBoardDiv = document.createElement(\"div\");\n      generalBoardDiv.classList.add(\"board-div\");\n      const columnLabels = document.createElement(\"div\");\n      columnLabels.classList.add(\"column-labels\");\n      for (let i = 0; i < 10; i++) {\n        const p = document.createElement(\"p\");\n        p.textContent = columnLabelsText[i];\n        columnLabels.append(p);\n      }\n      const rowLabels = document.createElement(\"div\");\n      rowLabels.classList.add(\"row-labels\");\n      for (let i = 0; i < 10; i++) {\n        const p = document.createElement(\"p\");\n        p.textContent = rowLabelsText[i];\n        rowLabels.append(p);\n      }\n      const blankBoardDiv = document.createElement(\"div\");\n      blankBoardDiv.classList.add(\"board\");\n      generalBoardDiv.append(columnLabels, rowLabels, blankBoardDiv);\n      for (let i = 0; i < 100; i++) {\n        const newSquare = document.createElement(\"div\");\n        newSquare.classList.add(\"square\");\n        blankBoardDiv.append(newSquare);\n      }\n      gameDiv.append(generalBoardDiv);\n    } else {\n      // remove new game button\n\n      if (gameDiv.previousElementSibling.nodeName === \"BUTTON\") {\n        gameDiv.previousElementSibling.remove();\n      }\n\n      // get activePlayer and opponent info\n\n      const activePlayer = game.getActivePlayer();\n      const activePlayerGameboard = activePlayer.gameboard;\n      const activePlayerBoard = activePlayerGameboard.getBoard();\n\n      const opponent = game.getOpponent();\n      const opponentGameboard = opponent.gameboard;\n      const opponentBoard = opponentGameboard.getBoard();\n      const opponentShips = opponentGameboard.ships;\n\n      // show ship-placement screen if game is in that status\n\n      if (game.getGameStatus() === \"ship-placement\") {\n        const player1PlaceShipmentScreen = new PlaceShipmentScreen(\n          activePlayer,\n          \"click-ship\",\n        );\n        showShipPlacementScreen(player1PlaceShipmentScreen);\n      } else {\n        // add 'options' button & menu to top line\n\n        createAndAddOptionsButton();\n\n        // create game info text & add to gameDiv\n\n        const infoDiv = document.createElement(\"div\");\n        infoDiv.classList.add(\"info-div\");\n        const infoDivPlayersDiv = document.createElement(\"div\");\n        infoDivPlayersDiv.classList.add(\"info-div-players\");\n        const infoDivPlayersActivePlayerLine1 = document.createElement(\"p\");\n        infoDivPlayersActivePlayerLine1.classList.add(\"info-active-player\");\n        infoDivPlayersActivePlayerLine1.textContent = `Current turn: `;\n        const infoDivPlayersActivePlayerLine2 = document.createElement(\"p\");\n        infoDivPlayersActivePlayerLine2.classList.add(\"info-active-player\");\n        if (game.getGameStatus() === \"computer-attack\") {\n          infoDivPlayersActivePlayerLine2.textContent = `${opponent.name}`;\n        } else {\n          infoDivPlayersActivePlayerLine2.textContent = `${activePlayer.name}`;\n        }\n        const infoDivPlayersOpponentLine1 = document.createElement(\"p\");\n        infoDivPlayersOpponentLine1.classList.add(\"info-opponent\");\n        infoDivPlayersOpponentLine1.textContent = `Opponent: `;\n        const infoDivPlayersOpponentLine2 = document.createElement(\"p\");\n        infoDivPlayersOpponentLine2.classList.add(\"info-opponent\");\n        if (game.getGameStatus() === \"computer-attack\") {\n          infoDivPlayersOpponentLine2.textContent = `${activePlayer.name}`;\n        } else {\n          infoDivPlayersOpponentLine2.textContent = `${opponent.name}`;\n        }\n        infoDivPlayersDiv.append(\n          infoDivPlayersActivePlayerLine1,\n          infoDivPlayersActivePlayerLine2,\n          infoDivPlayersOpponentLine1,\n          infoDivPlayersOpponentLine2,\n        );\n\n        const infoDivTextDiv = document.createElement(\"div\");\n        infoDivTextDiv.classList.add(\"info-div-text-div\");\n        const infoDivTextDivFirstLine = document.createElement(\"p\");\n\n        if (game.getGameStatus() === \"player-turn\") {\n          infoDivTextDivFirstLine.textContent = `Click a square on your opponent's board to attack that square!`;\n          const infoDivTextDivSecondLine = document.createElement(\"p\");\n          infoDivTextDivSecondLine.textContent = `-If your opponent has a ship occupying that square, their ship will receive a hit`;\n          const infoDivTextDivThirdLine = document.createElement(\"p\");\n          infoDivTextDivThirdLine.textContent = `-If you hit all of the squares containing one of your opponent's ships, you'll sink that ship!`;\n          const infoDivTextDivFourthLine = document.createElement(\"p\");\n          infoDivTextDivFourthLine.textContent = `-Try to sink all of your opponent's ships! The game ends once either you or your opponent sinks all of the other player's ships on the board`;\n          infoDivTextDiv.append(\n            infoDivTextDivFirstLine,\n            infoDivTextDivSecondLine,\n            infoDivTextDivThirdLine,\n            infoDivTextDivFourthLine,\n          );\n        }\n\n        if (\n          game.getGameStatus() === \"active-player-attack\" ||\n          game.getGameStatus() === \"computer-attack\" ||\n          game.getGameStatus() === \"game-over\"\n        ) {\n          infoDivTextDiv.classList.add(\"info-div-player-attack\");\n          const infoDivTextDivTop = document.createElement(\"div\");\n          infoDivTextDivTop.classList.add(\"info-div-text-div-top\");\n          if (\n            game.getGameStatus() === \"computer-attack\" ||\n            (game.getGameStatus() === \"game-over\" &&\n              game.getWinner().type === \"computer\")\n          ) {\n            infoDivTextDivFirstLine.textContent = `The computer attacked: ${opponent.lastAttack.join(\"\")}`;\n          } else if (\n            game.getGameStatus() === \"active-player-attack\" ||\n            (game.getGameStatus() === \"game-over\" &&\n              game.getWinner().id === activePlayer.id)\n          ) {\n            infoDivTextDivFirstLine.textContent = `You attacked: ${activePlayer.lastAttack.join(\"\")}`;\n          }\n\n          const infoDivTextDivSecondLine = document.createElement(\"p\");\n          let result;\n          if (\n            game.getGameStatus() === \"computer-attack\" ||\n            (game.getGameStatus() === \"game-over\" &&\n              game.getWinner().type === \"computer\")\n          ) {\n            if (opponent.lastAttackResult === \"SINK\") result = \"HIT\";\n            else result = opponent.lastAttackResult;\n          } else {\n            if (activePlayer.lastAttackResult === \"SINK\") result = \"HIT\";\n            else result = activePlayer.lastAttackResult;\n          }\n          infoDivTextDivSecondLine.textContent = \"This was a \" + result;\n          infoDivTextDivTop.append(\n            infoDivTextDivFirstLine,\n            infoDivTextDivSecondLine,\n          );\n          infoDivTextDiv.append(infoDivTextDivTop);\n\n          if (!(game.getGameStatus() === \"game-over\")) {\n            if (\n              (game.getGameStatus() === \"computer-attack\" &&\n                opponent.lastAttackResult === \"SINK\") ||\n              (game.getGameStatus() === \"active-player-attack\" &&\n                activePlayer.lastAttackResult === \"SINK\")\n            ) {\n              const sinkTextDiv = document.createElement(\"div\");\n              sinkTextDiv.classList.add(\"sink-text-div\");\n              const sinkText1 = document.createElement(\"p\");\n              sinkText1.textContent = \"*SHIP SUNK!*\";\n              sinkTextDiv.append(sinkText1);\n              if (game.getGameStatus() === \"active-player-attack\") {\n                const sinkText2 = document.createElement(\"p\");\n                sinkText2.textContent = \"Woo-hoo!\";\n                sinkTextDiv.append(sinkText2);\n              }\n              infoDivTextDiv.append(sinkTextDiv);\n            }\n            const infoDivTextDivThirdLine = document.createElement(\"p\");\n            if (game.getGameStatus() === \"computer-attack\") {\n              infoDivTextDivThirdLine.textContent = `Next turn: ${activePlayer.name}`;\n            } else {\n              infoDivTextDivThirdLine.textContent = `Next turn: ${opponent.name}`;\n            }\n            const infoDivTextDivBottom = document.createElement(\"div\");\n            infoDivTextDivBottom.classList.add(\"info-div-text-div-bottom\");\n            const infoDivTextDivFourthLine = document.createElement(\"p\");\n            infoDivTextDivFourthLine.textContent = `Click OK to proceed:`;\n            const nextTurnOKBtn = document.createElement(\"button\");\n            nextTurnOKBtn.textContent = \"OK\";\n            infoDivTextDivBottom.append(\n              infoDivTextDivFourthLine,\n              nextTurnOKBtn,\n            );\n\n            function initiateNextTurn() {\n              if (game.getGameStatus() === \"active-player-attack\") {\n                if (opponent.type === \"computer\") {\n                  computer().computerAttack();\n\n                  if (activePlayerGameboard.allShipsSunk()) {\n                    game.setGameStatus(\"game-over\");\n                    game.setWinner(opponent);\n                  } else game.setGameStatus(\"computer-attack\");\n\n                  displayController.updateScreen();\n\n                  const infoDivTextDivTop = document.querySelector(\n                    \".info-div-text-div-top\",\n                  );\n                  const infoDivTextDivTop1 =\n                    infoDivTextDivTop.firstElementChild;\n                  const infoDivTextDivTop2 =\n                    infoDivTextDivTop1.nextElementSibling;\n\n                  if (game.getGameStatus() === \"game-over\") {\n                    const gameOverDiv =\n                      document.querySelector(\".game-over-div\");\n                    const gameOverButtonsDiv =\n                      document.querySelector(\".game-over-buttons\");\n\n                    const computerMissedShips = document.querySelectorAll(\n                      \".game-over-regular-wait\",\n                    );\n                    const computerMissedShipsHits = document.querySelectorAll(\n                      \".game-over-hit-ship-wait\",\n                    );\n\n                    setTimeout(() => {\n                      infoDivTextDivTop1.classList.remove(\"hidden\");\n                    }, 1000);\n\n                    setTimeout(() => {\n                      infoDivTextDivTop2.classList.remove(\"hidden\");\n                    }, 2500);\n\n                    setTimeout(() => {\n                      const ids = [\"2\", \"3A\", \"3B\", \"4\", \"5\"];\n                      computerMissedShips.forEach((ship) => {\n                        ship.classList.remove(\"game-over-regular-wait\");\n                        ids.forEach((id) => {\n                          if (\n                            opponentBoard[Number(ship.dataset.row)][\n                              Number(ship.dataset.column)\n                            ].includes(id)\n                          ) {\n                            if (id === \"3A\" || id === \"3B\")\n                              ship.textContent = \"3\";\n                            else ship.textContent = id;\n                          }\n                        });\n                      });\n                      if (computerMissedShipsHits !== undefined) {\n                        computerMissedShipsHits.forEach((ship) => {\n                          ship.classList.remove(\"game-over-hit-ship-wait\");\n                          ids.forEach((id) => {\n                            if (\n                              opponentBoard[Number(ship.dataset.row)][\n                                Number(ship.dataset.column)\n                              ].includes(id)\n                            ) {\n                              if (id === \"3A\" || id === \"3B\")\n                                ship.textContent = \"3\";\n                              else ship.textContent = id;\n                            }\n                          });\n                        });\n                      }\n                    }, 4000);\n\n                    setTimeout(() => {\n                      gameOverDiv.classList.remove(\"hidden\");\n                    }, 4000);\n\n                    setTimeout(() => {\n                      gameOverButtonsDiv.classList.remove(\"hidden\");\n                    }, 4000);\n                  }\n\n                  if (game.getGameStatus() === \"computer-attack\") {\n                    let sinkTextDiv;\n                    let infoDivNextTurn;\n\n                    if (opponent.lastAttackResult === \"SINK\") {\n                      sinkTextDiv = document.querySelector(\".sink-text-div\");\n                      infoDivNextTurn = sinkTextDiv.nextElementSibling;\n                    } else\n                      infoDivNextTurn = infoDivTextDivTop.nextElementSibling;\n\n                    const infoDivTextDivBottom = document.querySelector(\n                      \".info-div-text-div-bottom\",\n                    );\n\n                    const waitSquares = document.querySelectorAll(\".wait\");\n                    setTimeout(() => {\n                      waitSquares.forEach((square) =>\n                        square.classList.remove(\"wait\"),\n                      );\n                    }, 1000);\n\n                    setTimeout(() => {\n                      infoDivTextDivTop1.classList.remove(\"hidden\");\n                    }, 1000);\n                    setTimeout(() => {\n                      infoDivTextDivTop2.classList.remove(\"hidden\");\n                    }, 2500);\n\n                    if (opponent.lastAttackResult === \"SINK\") {\n                      setTimeout(() => {\n                        sinkTextDiv.classList.remove(\"hidden\");\n                      }, 4000);\n                      setTimeout(() => {\n                        infoDivNextTurn.classList.remove(\"hidden\");\n                      }, 5500);\n                      setTimeout(() => {\n                        infoDivTextDivBottom.classList.remove(\"hidden\");\n                      }, 5500);\n                    } else {\n                      setTimeout(() => {\n                        infoDivNextTurn.classList.remove(\"hidden\");\n                      }, 4000);\n                      setTimeout(() => {\n                        infoDivTextDivBottom.classList.remove(\"hidden\");\n                      }, 4000);\n                    }\n                  }\n                } else {\n                  game.switchPlayerTurn();\n                  game.setGameStatus(\"player-turn\");\n                  displayController.updateScreen();\n                }\n              } else {\n                game.setGameStatus(\"player-turn\");\n                displayController.updateScreen();\n              }\n            }\n\n            nextTurnOKBtn.addEventListener(\"click\", initiateNextTurn);\n\n            infoDivTextDiv.append(\n              infoDivTextDivThirdLine,\n              infoDivTextDivBottom,\n            );\n          } else {\n            const gameOverDiv = document.createElement(\"div\");\n            gameOverDiv.classList.add(\"game-over-div\");\n            const gameOverText1 = document.createElement(\"p\");\n            gameOverText1.textContent = \"*GAME OVER!*\";\n            const gameOverText2 = document.createElement(\"p\");\n            if (opponentGameboard.allShipsSunk()) {\n              if (opponent.type === \"computer\") gameOverText2.textContent = `Congrats! You win!`;\n              else gameOverText2.textContent = `${activePlayer.name} wins!`;\n            } else gameOverText2.textContent = `Sorry, you lose :(`;\n            gameOverDiv.append(gameOverText1, gameOverText2);\n            const gameOverButtonsDiv = document.createElement(\"div\");\n            gameOverButtonsDiv.classList.add(\"game-over-buttons\");\n            const playAgainOKBtn = document.createElement(\"button\");\n            playAgainOKBtn.textContent = \"Play again\";\n            const changePlayersBtn = document.createElement(\"button\");\n            changePlayersBtn.textContent = \"Change players\";\n            gameOverButtonsDiv.append(playAgainOKBtn, changePlayersBtn);\n            infoDivTextDiv.append(gameOverDiv, gameOverButtonsDiv);\n\n            playAgainOKBtn.addEventListener(\"click\", () => {\n              if (game.getPlayer2().type === \"computer\") {\n                game.startGame(game.getPlayer1().name);\n              } else {\n                game.startGame(\n                  game.getPlayer1().name,\n                  game.getPlayer2().name,\n                  \"human\",\n                );\n              }\n              game.setGameStatus(\"ship-placement\");\n              displayController.updateScreen();\n            });\n            changePlayersBtn.addEventListener(\"click\", activateNewGame);\n          }\n        }\n\n        infoDiv.append(infoDivPlayersDiv, infoDivTextDiv);\n        gameDiv.append(infoDiv);\n\n        if (\n          game.getGameStatus() === \"active-player-attack\" ||\n          game.getGameStatus() === \"computer-attack\" ||\n          game.getGameStatus() === \"game-over\"\n        ) {\n          const infoDivTextDivTop = document.querySelector(\n            \".info-div-text-div-top\",\n          );\n          const infoDivTextDivTop1 = infoDivTextDivTop.firstElementChild;\n          const infoDivTextDivTop2 = infoDivTextDivTop1.nextElementSibling;\n\n          let sinkTextDiv;\n          let infoDivNextTurn;\n\n          if (game.getGameStatus() === \"active-player-attack\") {\n            if (activePlayer.lastAttackResult === \"SINK\") {\n              sinkTextDiv = document.querySelector(\".sink-text-div\");\n              infoDivNextTurn = sinkTextDiv.nextElementSibling;\n            } else infoDivNextTurn = infoDivTextDivTop.nextElementSibling;\n          } else if (!(game.getGameStatus() === \"game-over\")) {\n            if (opponent.lastAttackResult === \"SINK\") {\n              sinkTextDiv = document.querySelector(\".sink-text-div\");\n              infoDivNextTurn = sinkTextDiv.nextElementSibling;\n            } else infoDivNextTurn = infoDivTextDivTop.nextElementSibling;\n          }\n\n          const gameOverDiv = document.querySelector(\".game-over-div\");\n          const gameOverButtonsDiv =\n            document.querySelector(\".game-over-buttons\");\n\n          const infoDivTextDivBottom = document.querySelector(\n            \".info-div-text-div-bottom\",\n          );\n\n          if (\n            game.getGameStatus() === \"computer-attack\" ||\n            (game.getGameStatus() === \"game-over\" &&\n              game.getWinner().type === \"computer\")\n          ) {\n            infoDivTextDivTop1.classList.add(\"hidden\");\n          }\n\n          infoDivTextDivTop2.classList.add(\"hidden\");\n\n          if (\n            (game.getGameStatus() === \"active-player-attack\" &&\n              activePlayer.lastAttackResult === \"SINK\") ||\n            (game.getGameStatus() === \"computer-attack\" &&\n              opponent.lastAttackResult === \"SINK\")\n          ) {\n            sinkTextDiv.classList.add(\"hidden\");\n          }\n\n          if (game.getGameStatus() === \"game-over\") {\n            gameOverDiv.classList.add(\"hidden\");\n            gameOverButtonsDiv.classList.add(\"hidden\");\n          }\n\n          if (!(game.getGameStatus() === \"game-over\")) {\n            infoDivNextTurn.classList.add(\"hidden\");\n            infoDivTextDivBottom.classList.add(\"hidden\");\n          }\n        }\n\n        // create opponent board side of webpage\n\n        const opponentSection = document.createElement(\"div\");\n        opponentSection.classList.add(\"opponent-section\");\n        const opponentSectionH2 = document.createElement(\"h2\");\n        opponentSectionH2.textContent = `${opponent.name}'s waters:`;\n        const generalBoardDiv1 = document.createElement(\"div\");\n        generalBoardDiv1.classList.add(\"board-div\");\n        const opponentColumnLabels = document.createElement(\"div\");\n        opponentColumnLabels.classList.add(\"column-labels\");\n        for (let i = 0; i < 10; i++) {\n          const p = document.createElement(\"p\");\n          p.textContent = columnLabelsText[i];\n          opponentColumnLabels.append(p);\n        }\n        const opponentRowLabels = document.createElement(\"div\");\n        opponentRowLabels.classList.add(\"row-labels\");\n        for (let i = 0; i < 10; i++) {\n          const p = document.createElement(\"p\");\n          p.textContent = rowLabelsText[i];\n          opponentRowLabels.append(p);\n        }\n        const opponentBoardDiv = document.createElement(\"div\");\n        opponentBoardDiv.classList.add(\"board\");\n        generalBoardDiv1.append(\n          opponentColumnLabels,\n          opponentRowLabels,\n          opponentBoardDiv,\n        );\n        opponentSection.append(opponentSectionH2, generalBoardDiv1);\n\n        // create active player board side of webpage\n\n        const activePlayerSection = document.createElement(\"div\");\n        activePlayerSection.classList.add(\"active-player-section\");\n        const activePlayerSectionH2 = document.createElement(\"h2\");\n        activePlayerSectionH2.textContent = `${activePlayer.name}'s waters:`;\n        const generalBoardDiv2 = document.createElement(\"div\");\n        generalBoardDiv2.classList.add(\"board-div\");\n        const activePlayerColumnLabels = document.createElement(\"div\");\n        activePlayerColumnLabels.classList.add(\"column-labels\");\n        for (let i = 0; i < 10; i++) {\n          const p = document.createElement(\"p\");\n          p.textContent = columnLabelsText[i];\n          activePlayerColumnLabels.append(p);\n        }\n        const activePlayerRowLabels = document.createElement(\"div\");\n        activePlayerRowLabels.classList.add(\"row-labels\");\n        for (let i = 0; i < 10; i++) {\n          const p = document.createElement(\"p\");\n          p.textContent = rowLabelsText[i];\n          activePlayerRowLabels.append(p);\n        }\n        const activePlayerBoardDiv = document.createElement(\"div\");\n        activePlayerBoardDiv.classList.add(\"board\");\n        generalBoardDiv2.append(\n          activePlayerColumnLabels,\n          activePlayerRowLabels,\n          activePlayerBoardDiv,\n        );\n        activePlayerSection.append(activePlayerSectionH2, generalBoardDiv2);\n\n        // add opponentSection & activePlayerSection to gameDiv\n\n        gameDiv.append(opponentSection, activePlayerSection);\n\n        // fill in opponent board\n\n        opponentBoard.forEach((row, index) => {\n          let rowIndex = index;\n          row.forEach((square, index) => {\n            const newSquare = document.createElement(\"div\");\n            newSquare.classList.add(\"square\");\n            newSquare.dataset.row = rowIndex;\n            newSquare.dataset.column = index;\n            if (Array.isArray(square)) {\n              if (square.includes(\"miss\")) newSquare.classList.add(\"miss\");\n              if (game.getGameStatus() === \"game-over\") {\n                const ids = [\"2\", \"3A\", \"3B\", \"4\", \"5\"];\n                ids.forEach((id) => {\n                  if (square.includes(id)) {\n                    if (square.includes(\"is sunk\"))\n                      newSquare.classList.add(\"is-sunk\");\n                    else {\n                      newSquare.classList.add(\"missed-ship\");\n                      if (square.includes(\"hit\")) {\n                        newSquare.classList.add(\"game-over-hit-ship-wait\");\n                        newSquare.textContent = \"X\";\n                      } else newSquare.classList.add(\"game-over-regular-wait\");\n                    }\n                    if (!newSquare.classList.contains(\"missed-ship\")) {\n                      if (id === \"3A\" || id === \"3B\")\n                        newSquare.textContent = \"3\";\n                      else newSquare.textContent = id;\n                    }\n                  }\n                });\n              } else {\n                if (square.includes(\"hit\")) {\n                  newSquare.classList.add(\"hit\");\n                  if (square.includes(\"is sunk\")) {\n                    newSquare.classList.add(\"is-sunk\");\n                    const ids = [\"2\", \"3A\", \"3B\", \"4\", \"5\"];\n                    const matchingID = ids.filter((id) =>\n                      square.includes(id),\n                    )[0];\n                    if (matchingID === \"3A\" || matchingID === \"3B\")\n                      newSquare.textContent = \"3\";\n                    else newSquare.textContent = matchingID;\n                  } else newSquare.textContent = \"X\";\n                }\n              }\n            }\n            opponentBoardDiv.appendChild(newSquare);\n          });\n        });\n\n        // add event listeners to opponent board cells\n\n        const opponentSquares = opponentBoardDiv.querySelectorAll(\".square\");\n\n        function toggleSquareHover(e) {\n          e.target.classList.toggle(\"hover\");\n        }\n\n        function attackSquare(e) {\n          const selectedRow = e.target.dataset.row;\n          const selectedColumn = e.target.dataset.column;\n          opponentGameboard.receiveAttack([selectedRow, selectedColumn]);\n          activePlayer.lastAttack = [\n            columnLabelsText[Number(selectedColumn)],\n            rowLabelsText[Number(selectedRow)],\n          ];\n          if (opponentBoard[selectedRow][selectedColumn].includes(\"miss\"))\n            activePlayer.lastAttackResult = \"MISS\";\n          if (opponentBoard[selectedRow][selectedColumn].includes(\"hit\")) {\n            if (\n              opponentBoard[selectedRow][selectedColumn].includes(\"is sunk\")\n            ) {\n              activePlayer.lastAttackResult = \"SINK\";\n            } else activePlayer.lastAttackResult = \"HIT\";\n          }\n          if (opponentGameboard.allShipsSunk()) {\n            game.setGameStatus(\"game-over\");\n            game.setWinner(activePlayer);\n          } else {\n            game.setGameStatus(\"active-player-attack\");\n          }\n\n          displayController.updateScreen();\n\n          const infoDivTextDivTop = document.querySelector(\n            \".info-div-text-div-top\",\n          );\n\n          if (game.getGameStatus() === \"game-over\") {\n            const infoDivTextDivTop1 = infoDivTextDivTop.firstElementChild;\n            const infoDivTextDivTop2 = infoDivTextDivTop1.nextElementSibling;\n\n            const gameOverDiv = document.querySelector(\".game-over-div\");\n            const gameOverButtonsDiv =\n              document.querySelector(\".game-over-buttons\");\n\n            setTimeout(() => {\n              infoDivTextDivTop1.classList.remove(\"hidden\");\n            }, 1000);\n\n            setTimeout(() => {\n              infoDivTextDivTop2.classList.remove(\"hidden\");\n            }, 2500);\n\n            setTimeout(() => {\n              gameOverDiv.classList.remove(\"hidden\");\n            }, 4000);\n\n            setTimeout(() => {\n              gameOverButtonsDiv.classList.remove(\"hidden\");\n            }, 4000);\n          }\n\n          if (game.getGameStatus() === \"active-player-attack\") {\n            const infoDivTextDivTop2 = infoDivTextDivTop.lastElementChild;\n\n            let sinkTextDiv;\n            let infoDivNextTurn;\n\n            if (activePlayer.lastAttackResult === \"SINK\") {\n              sinkTextDiv = document.querySelector(\".sink-text-div\");\n              infoDivNextTurn = sinkTextDiv.nextElementSibling;\n            } else infoDivNextTurn = infoDivTextDivTop.nextElementSibling;\n\n            const infoDivTextDivBottom = document.querySelector(\n              \".info-div-text-div-bottom\",\n            );\n\n            setTimeout(() => {\n              infoDivTextDivTop2.classList.remove(\"hidden\");\n            }, 1500);\n\n            if (activePlayer.lastAttackResult === \"SINK\") {\n              setTimeout(() => {\n                sinkTextDiv.classList.remove(\"hidden\");\n              }, 3000);\n              setTimeout(() => {\n                infoDivNextTurn.classList.remove(\"hidden\");\n              }, 4500);\n              setTimeout(() => {\n                infoDivTextDivBottom.classList.remove(\"hidden\");\n              }, 4500);\n            } else {\n              setTimeout(() => {\n                infoDivNextTurn.classList.remove(\"hidden\");\n              }, 3000);\n              setTimeout(() => {\n                infoDivTextDivBottom.classList.remove(\"hidden\");\n              }, 3000);\n            }\n          }\n        }\n\n        if (game.getGameStatus() === \"player-turn\") {\n          opponentSquares.forEach((square) => {\n            if (\n              !(\n                square.classList.contains(\"hit\") ||\n                square.classList.contains(\"miss\")\n              )\n            ) {\n              square.addEventListener(\"mouseover\", toggleSquareHover);\n              square.addEventListener(\"mouseout\", toggleSquareHover);\n              square.addEventListener(\"click\", attackSquare);\n            }\n          });\n        }\n\n        // fill in active player board\n\n        activePlayerBoard.forEach((row, index) => {\n          let rowIndex = index;\n          row.forEach((square, index) => {\n            const newSquare = document.createElement(\"div\");\n            newSquare.classList.add(\"square\");\n            newSquare.dataset.row = rowIndex;\n            newSquare.dataset.column = index;\n            if (square !== null) {\n              if (square.includes(\"miss\")) newSquare.classList.add(\"miss\");\n              else {\n                const ids = [\"2\", \"3A\", \"3B\", \"4\", \"5\"];\n                ids.forEach((id) => {\n                  if (square.includes(id)) {\n                    newSquare.classList.add(\"active-player-ship\");\n                    if (square.includes(\"hit\")) newSquare.classList.add(\"hit\");\n                    if (square.includes(\"is sunk\"))\n                      newSquare.classList.add(\"is-sunk\");\n                    if (id === \"3A\" || id === \"3B\") newSquare.textContent = \"3\";\n                    else newSquare.textContent = id;\n                  }\n                });\n              }\n            }\n            activePlayerBoardDiv.append(newSquare);\n          });\n        });\n\n        if (game.getGameStatus() === \"computer-attack\") {\n          const attackedSquareRow = rowLabelsText.indexOf(\n            opponent.lastAttack[1],\n          );\n          const attackedSquareColumn = columnLabelsText.indexOf(\n            opponent.lastAttack[0],\n          );\n\n          const activePlayerSection = document.querySelector(\n            \".active-player-section\",\n          );\n          const attackedSquare = activePlayerSection.querySelector(\n            `[data-row=\"${attackedSquareRow}\"][data-column=\"${attackedSquareColumn}\"]`,\n          );\n\n          if (!(opponent.lastAttackResult === \"SINK\")) {\n            attackedSquare.classList.add(\"wait\");\n          } else {\n            const ids = [\"2\", \"3A\", \"3B\", \"4\", \"5\"];\n            const idArray = activePlayerBoard[attackedSquareRow][\n              attackedSquareColumn\n            ].filter((item) => ids.includes(item));\n            const id = idArray[0];\n            const idSquares = [];\n            activePlayerBoard.forEach((row, index) => {\n              let rowIndex = index;\n              row.forEach((square, index) => {\n                if (Array.isArray(square)) {\n                  if (square.includes(id)) {\n                    idSquares.push(\n                      activePlayerSection.querySelector(\n                        `[data-row=\"${rowIndex}\"][data-column=\"${index}\"]`,\n                      ),\n                    );\n                  }\n                }\n              });\n            });\n            idSquares.forEach((square) => square.classList.add(\"wait\"));\n          }\n        }\n\n        // fill in opponent ship count\n\n        bottomDiv.classList.add(\"bottom-div\");\n        const bottomDivText = document.createElement(\"p\");\n        bottomDivText.textContent = `Opponent ships remaining:`;\n        bottomDiv.append(bottomDivText);\n\n        // without the below code, if the game ends and the opponent has no more ships remaining, the\n        // empty \"opponent ships\" section at the bottom of the page might shift the other elements on\n        // the page in an undesired way. creating and formatting an empty square div prevents this\n\n        if (opponentGameboard.allShipsSunk()) {\n          const emptySquareDiv = document.createElement(\"div\");\n          emptySquareDiv.classList.add(\"empty-square-div\");\n          bottomDiv.append(emptySquareDiv);\n        }\n\n        opponentShips.forEach((ship) => {\n          if (!ship.isSunk()) {\n            const shipDiv = document.createElement(\"div\");\n            shipDiv.classList.add(\"ship-div\");\n            for (let i = 0; i < ship.length; i++) {\n              const squareDiv = document.createElement(\"div\");\n              squareDiv.textContent = ship.length.toString();\n              shipDiv.append(squareDiv);\n            }\n            bottomDiv.append(shipDiv);\n          }\n        });\n\n        // show pass screen dialog if 2-player game\n\n        if (game.getPlayer2().type === \"human\") {\n          if (game.getGameStatus() === \"player-turn\") {\n            const mainContainer = document.querySelector(\".main-container\");\n            const nextPlayerTurnDialog = document.createElement(\"dialog\");\n            nextPlayerTurnDialog.id = \"next-player-turn-dialog\";\n            const nextPlayerTurnDialogDiv = document.createElement(\"div\");\n            const activePlayerName = document.createElement(\"span\");\n            activePlayerName.classList.add(\"next-player-dialog-player2-name\");\n            activePlayerName.textContent = activePlayer.name;\n            const clonedActivePlayerName = activePlayerName.cloneNode(true);\n            const clonedActivePlayerName2 = activePlayerName.cloneNode(true);\n            const opponentName = document.createElement(\"span\");\n            opponentName.classList.add(\"next-player-dialog-player1-name\");\n            opponentName.textContent = opponent.name;\n            const line1 = document.createElement(\"p\");\n            line1.append(\"Next up: \", activePlayerName);\n            const line2 = document.createElement(\"p\");\n            line2.append(\n              opponentName,\n              \", pass the screen to \",\n              clonedActivePlayerName,\n              \"!\",\n            );\n            const line3 = document.createElement(\"p\");\n            line3.append(\n              clonedActivePlayerName2,\n              \", click OK when you're ready!\",\n            );\n            const nextPlayerTurnDialogButtons = document.createElement(\"div\");\n            nextPlayerTurnDialogButtons.classList.add(\n              \"next-player-dialog-buttons\",\n            );\n\n            const okBtn = document.createElement(\"button\");\n            okBtn.textContent = \"OK\";\n            nextPlayerTurnDialogButtons.append(okBtn);\n            nextPlayerTurnDialogDiv.append(\n              line1,\n              line2,\n              line3,\n              nextPlayerTurnDialogButtons,\n            );\n            nextPlayerTurnDialog.append(nextPlayerTurnDialogDiv);\n            mainContainer.append(nextPlayerTurnDialog);\n\n            okBtn.addEventListener(\"click\", () => {\n              nextPlayerTurnDialog.close();\n              nextPlayerTurnDialog.remove();\n\n              if (opponent.lastAttack !== null) {\n                const lastTurnDialog = document.createElement(\"dialog\");\n                lastTurnDialog.id = \"last-turn-dialog\";\n                const lastTurnDialogDiv = document.createElement(\"div\");\n                const lastTurnLine1 = document.createElement(\"p\");\n                const lastTurnDialogOpponentName =\n                  document.createElement(\"span\");\n                lastTurnDialogOpponentName.classList.add(\n                  \"next-player-dialog-player1-name\",\n                );\n                lastTurnDialogOpponentName.textContent = opponent.name;\n                lastTurnLine1.append(\n                  \"Last turn: \",\n                  lastTurnDialogOpponentName,\n                  ` attacked ${opponent.lastAttack.join(\"\")}`,\n                );\n                const lastTurnLine2 = document.createElement(\"p\");\n                let result;\n                if (opponent.lastAttackResult === \"SINK\") result = \"HIT\";\n                else result = opponent.lastAttackResult;\n                lastTurnLine2.textContent = \"This was a \" + result;\n                const lastTurnLine3 = document.createElement(\"p\");\n                const lastTurnLine4 = document.createElement(\"p\");\n                if (opponent.lastAttackResult === \"SINK\") {\n                  lastTurnLine3.textContent = \"*SHIP SUNK!*\";\n                  lastTurnLine3.classList.add(\"ship-sunk-text\");\n                  lastTurnLine4.textContent = \"Click OK to continue:\";\n                } else lastTurnLine3.textContent = \"Click OK to continue:\";\n                const lastTurnOKBtnDiv = document.createElement(\"div\");\n                lastTurnOKBtnDiv.classList.add(\"next-player-dialog-buttons\");\n                const lastTurnOKBtn = document.createElement(\"button\");\n                lastTurnOKBtn.textContent = \"OK\";\n                lastTurnOKBtnDiv.append(lastTurnOKBtn);\n                lastTurnDialogDiv.append(\n                  lastTurnLine1,\n                  lastTurnLine2,\n                  lastTurnLine3,\n                  lastTurnOKBtnDiv,\n                );\n                if (opponent.lastAttackResult === \"SINK\")\n                  lastTurnOKBtnDiv.before(lastTurnLine4);\n                lastTurnDialog.append(lastTurnDialogDiv);\n                mainContainer.append(lastTurnDialog);\n\n                lastTurnOKBtn.addEventListener(\"click\", () => {\n                  lastTurnDialog.close();\n                  lastTurnDialog.remove();\n                });\n\n                lastTurnDialog.showModal();\n              }\n            });\n\n            nextPlayerTurnDialog.showModal();\n          }\n        }\n      }\n    }\n  };\n\n  updateScreen();\n\n  return { updateScreen };\n})();\n","import { game } from \"./game\";\nimport { displayController } from \"./display-controller\";\nimport { activateNewGame } from \"./activate-new-game\";\n\nexport function createAndAddOptionsButton() {\n  const body = document.querySelector(\"body\");\n  const topLineMenuDiv = document.querySelector(\".top-line-menu-div\");\n\n  const optionsBtn = document.createElement(\"button\");\n  optionsBtn.dataset.closeEventListener = \"OFF\";\n  optionsBtn.textContent = \"Options\";\n\n  const optionsBtnMenu = document.createElement(\"div\");\n  optionsBtnMenu.classList.add(\"options-button-menu\");\n  optionsBtnMenu.classList.add(\"hidden\");\n\n  const newGameRow = document.createElement(\"button\");\n  newGameRow.classList.add(\"options-menu-row\");\n  newGameRow.textContent = \"New game\";\n  const restartGameRow = document.createElement(\"button\");\n  restartGameRow.classList.add(\"options-menu-row\");\n  restartGameRow.textContent = \"Restart game\";\n  optionsBtnMenu.append(newGameRow, restartGameRow);\n\n  topLineMenuDiv.append(optionsBtn, optionsBtnMenu);\n\n  newGameRow.addEventListener(\"click\", activateNewGame);\n\n  restartGameRow.addEventListener(\"click\", () => {\n    const player1 = game.getPlayer1();\n    const player2 = game.getPlayer2();\n\n    const restartGameDialog = document.createElement(\"dialog\");\n    restartGameDialog.setAttribute(\"id\", \"restart-game-dialog\");\n    const cancelBtn = document.createElement(\"button\");\n    cancelBtn.classList.add(\"dialog-cancel-btn\");\n    cancelBtn.textContent = \"X\";\n    restartGameDialog.append(cancelBtn);\n    cancelBtn.addEventListener(\"click\", () => {\n      restartGameDialog.close();\n      restartGameDialog.remove();\n    });\n    const warningSymbol = document.createElement(\"p\");\n    warningSymbol.textContent = `\\u2757`;\n    restartGameDialog.append(warningSymbol);\n    const warningText = document.createElement(\"p\");\n    warningText.textContent = \"Are you sure you want to restart this game?\";\n    restartGameDialog.appendChild(warningText);\n    const restartGameDialogBtnsDiv = document.createElement(\"div\");\n    restartGameDialogBtnsDiv.classList.add(\"restart-game-dialog-buttons\");\n    const confirmNoBtn = document.createElement(\"button\");\n    confirmNoBtn.textContent = \"No\";\n    restartGameDialogBtnsDiv.appendChild(confirmNoBtn);\n    const confirmYesBtn = document.createElement(\"button\");\n    confirmYesBtn.textContent = \"Yes\";\n    restartGameDialogBtnsDiv.appendChild(confirmYesBtn);\n    restartGameDialog.appendChild(restartGameDialogBtnsDiv);\n    body.appendChild(restartGameDialog);\n    restartGameDialog.showModal();\n\n    confirmNoBtn.addEventListener(\"click\", () => {\n      restartGameDialog.close();\n      restartGameDialog.remove();\n    });\n\n    confirmYesBtn.addEventListener(\"click\", () => {\n      const activePlayer = game.getActivePlayer();\n      const player1Ships = player1.gameboard.ships;\n      const player2Ships = player2.gameboard.ships;\n      const player1Board = player1.gameboard.getBoard();\n      const player2Board = player2.gameboard.getBoard();\n\n      restartGameDialog.close();\n      restartGameDialog.remove();\n\n      if (activePlayer.id === \"Player 2\") game.switchPlayerTurn();\n\n      player1Ships.forEach((ship) => (ship.hits = 0));\n      player2Ships.forEach((ship) => (ship.hits = 0));\n\n      player1.lastAttack = null;\n      player1.lastAttackResult = null;\n      player2.lastAttack = null;\n      player2.lastAttackResult = null;\n\n      if (player2.type === \"computer\") {\n        delete player2.attackTurn;\n        delete player2.firstHit;\n        delete player2.hitButNotSunkShips;\n        delete player2.tryingToSink;\n      }\n\n      const ids = [\"2\", \"3A\", \"3B\", \"4\", \"5\"];\n      function containsID(array) {\n        let response = false;\n        for (let i = 0; i < ids.length; i++) {\n          const id = ids[i];\n          if (array.includes(id)) {\n            response = true;\n            break;\n          }\n        }\n        return response;\n      }\n\n      player1Board.forEach((row) => {\n        for (let i = 0; i < row.length; i++) {\n          if (Array.isArray(row[i])) {\n            if (!containsID(row[i])) row[i] = null;\n            else {\n              const idArray = row[i].filter((item) => ids.includes(item));\n              row[i] = idArray;\n            }\n          }\n        }\n      });\n      player2Board.forEach((row) => {\n        for (let i = 0; i < row.length; i++) {\n          if (Array.isArray(row[i])) {\n            if (!containsID(row[i])) row[i] = null;\n            else {\n              const idArray = row[i].filter((item) => ids.includes(item));\n              row[i] = idArray;\n            }\n          }\n        }\n      });\n\n      game.setGameStatus(\"player-turn\");\n      displayController.updateScreen();\n    });\n  });\n\n  optionsBtn.addEventListener(\"mouseenter\", () => {\n    optionsBtn.classList.toggle(\"options-btn-hover\");\n  });\n\n  optionsBtn.addEventListener(\"mouseleave\", () => {\n    optionsBtn.classList.toggle(\"options-btn-hover\");\n  });\n\n  const menuCloseEvent = new CustomEvent(\"menuCloseEvent\");\n\n  function closeMenu() {\n    optionsBtn.classList.remove(\"options-btn-active\");\n    optionsBtnMenu.classList.add(\"hidden\");\n\n    optionsBtn.dispatchEvent(menuCloseEvent);\n  }\n\n  optionsBtn.addEventListener(\"click\", (e) => {\n    e.stopPropagation();\n\n    if (optionsBtn.classList.contains(\"options-btn-active\")) {\n      closeMenu();\n    } else {\n      optionsBtn.classList.add(\"options-btn-active\");\n      optionsBtnMenu.classList.remove(\"hidden\");\n\n      body.addEventListener(\"click\", closeMenu);\n\n      if (optionsBtn.dataset.closeEventListener === \"OFF\") {\n        optionsBtn.addEventListener(\"menuCloseEvent\", () => {\n          body.removeEventListener(\"click\", closeMenu);\n        });\n        optionsBtn.dataset.closeEventListener = \"ON\";\n      }\n    }\n  });\n}\n","import { game } from \"./game.js\";\nimport { possiblePositions } from \"./possible-ship-positions.js\";\n\nexport function computer() {\n  let computerPlayer;\n  let humanPlayer;\n\n  if (game.getPlayer2().type === \"computer\") {\n    computerPlayer = game.getPlayer2();\n    humanPlayer = game.getPlayer1();\n  }\n\n  const humanPlayerGameboard = humanPlayer.gameboard;\n  const humanPlayerBoard = humanPlayerGameboard.getBoard();\n\n  function computerAttack() {\n    const columnLabels = \"ABCDEFGHIJ\".split(\"\");\n    const rowLabels = \"1,2,3,4,5,6,7,8,9,10\".split(\",\");\n\n    function isValid([first, second]) {\n      if (first < 0 || first > 9 || second < 0 || second > 9) return false;\n      if (Array.isArray(humanPlayerBoard[first][second])) {\n        if (\n          humanPlayerBoard[first][second].includes(\"hit\") ||\n          humanPlayerBoard[first][second].includes(\"miss\")\n        )\n          return false;\n        else return true;\n      }\n      return true;\n    }\n\n    const queue = [];\n\n    function generateRandomCoordinates() {\n      const x = Math.floor(Math.random() * 10);\n      const y = Math.floor(Math.random() * 10);\n\n      queue.push([x, y]);\n    }\n\n    function generatePossibleAttacksFromPreviousHit(previousHitCoordinates) {\n      const previousHitRow = previousHitCoordinates[0];\n      const previousHitColumn = previousHitCoordinates[1];\n\n      let rightAttack = null;\n      let leftAttack = null;\n      let upAttack = null;\n      let downAttack = null;\n\n      if (previousHitColumn + 1 <= 9) {\n        rightAttack = [previousHitRow, previousHitColumn + 1];\n      }\n\n      if (previousHitColumn - 1 >= 0) {\n        leftAttack = [previousHitRow, previousHitColumn - 1];\n      }\n\n      if (previousHitRow - 1 >= 0) {\n        upAttack = [previousHitRow - 1, previousHitColumn];\n      }\n\n      if (previousHitRow + 1 <= 9) {\n        downAttack = [previousHitRow + 1, previousHitColumn];\n      }\n\n      const possibleAttacks = [rightAttack, leftAttack, upAttack, downAttack];\n      return possibleAttacks;\n    }\n\n    let randomCoordinates;\n\n    if (\n      computerPlayer.lastAttackResult === \"HIT\" &&\n      computerPlayer.attackTurn === 1\n    ) {\n      const lastAttackRow = rowLabels.indexOf(computerPlayer.lastAttack[1]);\n      const lastAttackColumn = columnLabels.indexOf(\n        computerPlayer.lastAttack[0],\n      );\n      const possibleAttacks = generatePossibleAttacksFromPreviousHit([\n        lastAttackRow,\n        lastAttackColumn,\n      ]);\n\n      let randomIndex = Math.floor(Math.random() * 4);\n      let randomAttack = possibleAttacks[randomIndex];\n\n      queue.push(randomAttack);\n\n      while (queue.length !== 0) {\n        if (queue[0] !== null && isValid(queue[0])) {\n          randomCoordinates = queue.shift();\n        } else {\n          randomIndex = Math.floor(Math.random() * 4);\n          randomAttack = possibleAttacks[randomIndex];\n          queue.push(randomAttack);\n          queue.shift();\n        }\n      }\n    } else if (\n      computerPlayer.lastAttackResult === \"SINK\" &&\n      computerPlayer.tryingToSink\n    ) {\n      const possibleAttacks = generatePossibleAttacksFromPreviousHit(\n        computerPlayer.firstHit,\n      );\n\n      let randomIndex = Math.floor(Math.random() * 4);\n      let randomAttack = possibleAttacks[randomIndex];\n\n      queue.push(randomAttack);\n\n      while (queue.length !== 0) {\n        if (queue[0] !== null && isValid(queue[0])) {\n          randomCoordinates = queue.shift();\n        } else {\n          randomIndex = Math.floor(Math.random() * 4);\n          randomAttack = possibleAttacks[randomIndex];\n          queue.push(randomAttack);\n          queue.shift();\n        }\n      }\n    } else if (\n      computerPlayer.tryingToSink &&\n      computerPlayer.lastAttackResult === \"HIT\" &&\n      computerPlayer.attackTurn !== 1\n    ) {\n      const lastAttackRow = rowLabels.indexOf(computerPlayer.lastAttack[1]);\n      const lastAttackColumn = columnLabels.indexOf(\n        computerPlayer.lastAttack[0],\n      );\n      const firstHitRow = computerPlayer.firstHit[0];\n      const firstHitColumn = computerPlayer.firstHit[1];\n\n      if (lastAttackRow === firstHitRow) {\n        let nextCoordinates = [lastAttackRow, lastAttackColumn + 1];\n        if (isValid(nextCoordinates)) {\n          randomCoordinates = nextCoordinates;\n        } else {\n          nextCoordinates = [lastAttackRow, lastAttackColumn - 1];\n          if (isValid(nextCoordinates)) {\n            randomCoordinates = nextCoordinates;\n          } else {\n            nextCoordinates = [firstHitRow, firstHitColumn - 1];\n            if (isValid(nextCoordinates)) {\n              randomCoordinates = nextCoordinates;\n            } else {\n              nextCoordinates = [firstHitRow, firstHitColumn + 1];\n              if (isValid(nextCoordinates)) {\n                randomCoordinates = nextCoordinates;\n              } else {\n                const possibleAttacks = generatePossibleAttacksFromPreviousHit(\n                  computerPlayer.firstHit,\n                );\n\n                let randomIndex = Math.floor(Math.random() * 4);\n                let randomAttack = possibleAttacks[randomIndex];\n\n                queue.push(randomAttack);\n\n                while (queue.length !== 0) {\n                  if (queue[0] !== null && isValid(queue[0])) {\n                    randomCoordinates = queue.shift();\n                  } else {\n                    randomIndex = Math.floor(Math.random() * 4);\n                    randomAttack = possibleAttacks[randomIndex];\n                    queue.push(randomAttack);\n                    queue.shift();\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else if (lastAttackColumn === firstHitColumn) {\n        let nextCoordinates = [lastAttackRow + 1, lastAttackColumn];\n        if (isValid(nextCoordinates)) {\n          randomCoordinates = nextCoordinates;\n        } else {\n          nextCoordinates = [lastAttackRow - 1, lastAttackColumn];\n          if (isValid(nextCoordinates)) {\n            randomCoordinates = nextCoordinates;\n          } else {\n            nextCoordinates = [firstHitRow - 1, firstHitColumn];\n            if (isValid(nextCoordinates)) {\n              randomCoordinates = nextCoordinates;\n            } else {\n              nextCoordinates = [firstHitRow + 1, firstHitColumn];\n              if (isValid(nextCoordinates)) {\n                randomCoordinates = nextCoordinates;\n              } else {\n                const possibleAttacks = generatePossibleAttacksFromPreviousHit(\n                  computerPlayer.firstHit,\n                );\n\n                let randomIndex = Math.floor(Math.random() * 4);\n                let randomAttack = possibleAttacks[randomIndex];\n\n                queue.push(randomAttack);\n\n                while (queue.length !== 0) {\n                  if (queue[0] !== null && isValid(queue[0])) {\n                    randomCoordinates = queue.shift();\n                  } else {\n                    randomIndex = Math.floor(Math.random() * 4);\n                    randomAttack = possibleAttacks[randomIndex];\n                    queue.push(randomAttack);\n                    queue.shift();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else if (\n      computerPlayer.tryingToSink &&\n      computerPlayer.lastAttackResult === \"MISS\" &&\n      computerPlayer.attackTurn !== 1\n    ) {\n      const firstHitRow = computerPlayer.firstHit[0];\n      const firstHitColumn = computerPlayer.firstHit[1];\n      if (computerPlayer.hitButNotSunkShips.length > 1) {\n        const lastAttackRow = rowLabels.indexOf(computerPlayer.lastAttack[1]);\n        const lastAttackColumn = columnLabels.indexOf(\n          computerPlayer.lastAttack[0],\n        );\n\n        if (lastAttackRow === firstHitRow) {\n          let nextCoordinates = [firstHitRow, firstHitColumn - 1];\n          if (isValid(nextCoordinates)) {\n            randomCoordinates = nextCoordinates;\n          } else {\n            nextCoordinates = [firstHitRow, firstHitColumn + 1];\n            if (isValid(nextCoordinates)) {\n              randomCoordinates = nextCoordinates;\n            } else {\n              const possibleAttacks = generatePossibleAttacksFromPreviousHit(\n                computerPlayer.firstHit,\n              );\n\n              let randomIndex = Math.floor(Math.random() * 4);\n              let randomAttack = possibleAttacks[randomIndex];\n\n              queue.push(randomAttack);\n\n              while (queue.length !== 0) {\n                if (queue[0] !== null && isValid(queue[0])) {\n                  randomCoordinates = queue.shift();\n                } else {\n                  randomIndex = Math.floor(Math.random() * 4);\n                  randomAttack = possibleAttacks[randomIndex];\n                  queue.push(randomAttack);\n                  queue.shift();\n                }\n              }\n            }\n          }\n        } else if (lastAttackColumn === firstHitColumn) {\n          let nextCoordinates = [firstHitRow - 1, firstHitColumn];\n          if (isValid(nextCoordinates)) {\n            randomCoordinates = nextCoordinates;\n          } else {\n            nextCoordinates = [firstHitRow + 1, firstHitColumn];\n            if (isValid(nextCoordinates)) {\n              randomCoordinates = nextCoordinates;\n            } else {\n              const possibleAttacks = generatePossibleAttacksFromPreviousHit(\n                computerPlayer.firstHit,\n              );\n\n              let randomIndex = Math.floor(Math.random() * 4);\n              let randomAttack = possibleAttacks[randomIndex];\n\n              queue.push(randomAttack);\n\n              while (queue.length !== 0) {\n                if (queue[0] !== null && isValid(queue[0])) {\n                  randomCoordinates = queue.shift();\n                } else {\n                  randomIndex = Math.floor(Math.random() * 4);\n                  randomAttack = possibleAttacks[randomIndex];\n                  queue.push(randomAttack);\n                  queue.shift();\n                }\n              }\n            }\n          }\n        }\n      } else {\n        const ids = [\"2\", \"3A\", \"3B\", \"4\", \"5\"];\n        const idArray = humanPlayerBoard[firstHitRow][firstHitColumn].filter(\n          (item) => ids.includes(item),\n        );\n        const id = idArray[0];\n        const hitShipArray = humanPlayerGameboard.ships.filter(\n          (ship) => ship.id === id,\n        );\n        const hitShip = hitShipArray[0];\n\n        if (hitShip.hits === 1) {\n          const possibleAttacks = generatePossibleAttacksFromPreviousHit(\n            computerPlayer.firstHit,\n          );\n\n          let randomIndex = Math.floor(Math.random() * 4);\n          let randomAttack = possibleAttacks[randomIndex];\n\n          queue.push(randomAttack);\n\n          while (queue.length !== 0) {\n            if (queue[0] !== null && isValid(queue[0])) {\n              randomCoordinates = queue.shift();\n            } else {\n              randomIndex = Math.floor(Math.random() * 4);\n              randomAttack = possibleAttacks[randomIndex];\n              queue.push(randomAttack);\n              queue.shift();\n            }\n          }\n        } else {\n          const hitShipSquares = [];\n          humanPlayerBoard.forEach((row, index) => {\n            let rowIndex = index;\n            row.forEach((square, index) => {\n              if (Array.isArray(square)) {\n                if (square.includes(hitShip.id) && square.includes(\"hit\")) {\n                  hitShipSquares.push([rowIndex, index]);\n                }\n              }\n            });\n          });\n          const firstHitShipSquare = hitShipSquares[0];\n          const secondHitShipSquare = hitShipSquares[1];\n\n          if (firstHitShipSquare[0] === secondHitShipSquare[0]) {\n            let nextCoordinates = [firstHitRow, firstHitColumn - 1];\n            if (isValid(nextCoordinates)) {\n              randomCoordinates = nextCoordinates;\n            } else randomCoordinates = [firstHitRow, firstHitColumn + 1];\n          } else if (firstHitShipSquare[1] === secondHitShipSquare[1]) {\n            let nextCoordinates = [firstHitRow - 1, firstHitColumn];\n            if (isValid(nextCoordinates)) {\n              randomCoordinates = nextCoordinates;\n            } else {\n              randomCoordinates = [firstHitRow + 1, firstHitColumn];\n            }\n          }\n        }\n      }\n    } else {\n      const humanPlayerShips = humanPlayer.gameboard.ships;\n      const nonSunkHumanPlayerShips = humanPlayerShips.filter(\n        (ship) => !ship.isSunk(),\n      );\n      const smallestShipFirstArray = [nonSunkHumanPlayerShips[0]];\n\n      for (let i = 0; i < nonSunkHumanPlayerShips.length - 1; i++) {\n        const currentShip = nonSunkHumanPlayerShips[i + 1];\n        const firstShipInSmallShipArray = smallestShipFirstArray[0];\n        if (currentShip.length <= firstShipInSmallShipArray.length) {\n          smallestShipFirstArray.unshift(currentShip);\n        } else smallestShipFirstArray.push(currentShip);\n      }\n\n      const smallestShipFirstArrayShip = smallestShipFirstArray[0];\n      const smallestShipArray = humanPlayerShips.filter(\n        (ship) => ship.id === smallestShipFirstArrayShip.id,\n      );\n      const smallestShip = smallestShipArray[0];\n\n      function possiblePositionsCanFitAtLeastOneSmallestShip(coordinates) {\n        const coordinatePossiblePositionsObject = possiblePositions(\n          smallestShip,\n          coordinates,\n        );\n        const coordinatePossiblePositions = Object.values(\n          coordinatePossiblePositionsObject,\n        );\n\n        let response = false;\n\n        for (let i = 0; i < coordinatePossiblePositions.length; i++) {\n          const currentPossiblePosition = coordinatePossiblePositions[i];\n          if (currentPossiblePosition !== null) {\n            const invalidCoordinates = currentPossiblePosition.filter(\n              (coordinates) => !isValid(coordinates),\n            );\n            if (invalidCoordinates.length === 0) {\n              response = true;\n              break;\n            }\n          }\n        }\n\n        return response;\n      }\n\n      generateRandomCoordinates();\n\n      while (queue.length !== 0) {\n        if (\n          isValid(queue[0]) &&\n          possiblePositionsCanFitAtLeastOneSmallestShip(queue[0])\n        ) {\n          randomCoordinates = queue.shift();\n        } else {\n          generateRandomCoordinates();\n          queue.shift();\n        }\n      }\n    }\n\n    humanPlayerGameboard.receiveAttack(randomCoordinates);\n\n    computerPlayer.lastAttack = [\n      columnLabels[randomCoordinates[1]],\n      rowLabels[randomCoordinates[0]],\n    ];\n\n    if (\n      humanPlayerBoard[randomCoordinates[0]][randomCoordinates[1]].includes(\n        \"miss\",\n      )\n    ) {\n      computerPlayer.lastAttackResult = \"MISS\";\n      if (computerPlayer.tryingToSink) computerPlayer.attackTurn += 1;\n    }\n\n    if (\n      humanPlayerBoard[randomCoordinates[0]][randomCoordinates[1]].includes(\n        \"hit\",\n      )\n    ) {\n      const ids = [\"2\", \"3A\", \"3B\", \"4\", \"5\"];\n      const idArray = humanPlayerBoard[randomCoordinates[0]][\n        randomCoordinates[1]\n      ].filter((item) => ids.includes(item));\n      const id = idArray[0];\n      const hitShipArray = humanPlayerGameboard.ships.filter(\n        (ship) => ship.id === id,\n      );\n      const hitShip = hitShipArray[0];\n\n      if (\n        humanPlayerBoard[randomCoordinates[0]][randomCoordinates[1]].includes(\n          \"is sunk\",\n        )\n      ) {\n        computerPlayer.lastAttackResult = \"SINK\";\n\n        let hitShipIndex;\n\n        computerPlayer.hitButNotSunkShips.forEach((ship, index) => {\n          if (ship.id === hitShip.id) hitShipIndex = index;\n        });\n        computerPlayer.hitButNotSunkShips.splice(hitShipIndex, 1);\n        if (computerPlayer.hitButNotSunkShips.length === 0) {\n          delete computerPlayer.hitButNotSunkShips;\n          delete computerPlayer.tryingToSink;\n          delete computerPlayer.firstHit;\n          delete computerPlayer.attackTurn;\n        } else {\n          const nextShip = computerPlayer.hitButNotSunkShips[0];\n          const hitButNotSunkSquares = [];\n          humanPlayerBoard.forEach((row, index) => {\n            let rowIndex = index;\n            row.forEach((square, index) => {\n              if (Array.isArray(square)) {\n                if (square.includes(nextShip.id) && square.includes(\"hit\")) {\n                  hitButNotSunkSquares.push([rowIndex, index]);\n                }\n              }\n            });\n          });\n          computerPlayer.firstHit = hitButNotSunkSquares[0];\n          computerPlayer.attackTurn = hitButNotSunkSquares.length;\n        }\n      } else {\n        computerPlayer.lastAttackResult = \"HIT\";\n\n        if (!computerPlayer.hitButNotSunkShips) {\n          computerPlayer.hitButNotSunkShips = [];\n        }\n\n        if (computerPlayer.hitButNotSunkShips.length === 0) {\n          computerPlayer.hitButNotSunkShips.push(hitShip);\n        } else {\n          function isIn(ship, array) {\n            let response = false;\n            for (let i = 0; i < array.length; i++) {\n              if (array[i].id === ship.id) response = true;\n              break;\n            }\n            return response;\n          }\n          if (!isIn(hitShip, computerPlayer.hitButNotSunkShips)) {\n            computerPlayer.hitButNotSunkShips.push(hitShip);\n          }\n        }\n\n        if (!computerPlayer.tryingToSink) {\n          computerPlayer.tryingToSink = true;\n          computerPlayer.firstHit = randomCoordinates;\n          computerPlayer.attackTurn = 1;\n        } else computerPlayer.attackTurn += 1;\n      }\n    }\n  }\n\n  return { computerAttack };\n}\n"],"names":["Player","constructor","name","id","type","this","lastAttack","lastAttackResult","gameboard","board","ships","Object","assign","isSunk","hits","length","hit","placed","getShips","createShips","i","j","push","getBoard","placeShip","ship","firstCoordinate","secondCoordinate","forEach","coordinate","Error","squares","x","y","square","clearBoard","row","receiveAttack","shipIDs","map","includes","hitShip","filter","Array","isArray","allShipsSunk","createGameboard","game","player1","player2","activePlayer","opponent","winner","gameStatus","getPlayer1","getPlayer2","getActivePlayer","getOpponent","switchPlayerTurn","getGameStatus","setGameStatus","value","startGame","player1Name","player2name","player2type","setWinner","player","getWinner","showEnterPlayerInfoScreen","e","newGameDialog","document","querySelector","numberOfPlayers","target","textContent","cancelBtn","createElement","classList","add","append","addEventListener","close","form","enterPlayer1","p1Label","firstWord","setAttribute","p1Input","p2Input","enterPlayer2","p2Label","okButton","displayController","updateScreen","activateNewGame","chooseNumberOfPlayersDiv","choosePlayersText","buttonsDiv","onePlayerButton","twoPlayerButton","showModal","PlaceShipmentScreen","status","activeShip","selectedStartingSquare","possiblePositions","startingSquare","shipPositions","firstPosition","secondPosition","thirdPosition","fourthPosition","currentShip","randomShipPlacement","playerGameboard","playerBoard","getRandomStartingSquare","startingSquareQueue","generateRandomStartingSquare","startingX","Math","floor","random","startingY","randomStartingSquare","shift","placeInRandomPosition","getRandomPosition","shipPossiblePositionsObject","filteredPossiblePositionArrays","values","array","numberOfValidPossiblePositions","occupied","position","answer","queue","randomPosition","finalSquare","showShipPlacementScreen","playerScreen","playerShips","screenStatus","gameDiv","columnLabelsText","split","rowLabelsText","previousElementSibling","nodeName","remove","h2","before","shipPlacementSection","shipPlacementTextDiv","shipPlacementLines","line1","shipSelectionDiv","shipSelectionLine","shipButton","shipText","displayedShip","squareDiv","toString","placedText","placedSymbol","querySelectorAll","getMatchingShip","selectedID","firstElementChild","nextElementSibling","contains","editShipButton","parentElement","matchingShip","toggleShipHover","toggle","shipPlacementButtons","startGameBtn","continueBtn","mainContainer","nextPlayerShipPlacementDialog","nextPlayerShipPlacementDialogDiv","player2Name","clonedPlayer2Name","cloneNode","nextPlayerShipPlacementDialogText1","nextPlayerShipPlacementDialogText2","nextPlayerShipPlacementDialogButtons","okBtn","shipPlacementRandomBtn","resetBoardButton","playerBoardDiv","columnLabels","p","rowLabels","blankBoardDiv","index","rowIndex","newSquare","dataset","column","newSquareCoordinates","Number","startingSquarePossiblePositions","isIn","smallArray","largeArray","toggleSquareHover","startingSquarePossiblePositionsObject","validStartingSquarePossiblePositions","occupiedValidPositions","isValid","position1Squares","position2Squares","position3Squares","position4Squares","group","neutralSquare","selectedSquares","firstSquare","lastSquare","window","scrollTo","topLineMenuDiv","bottomDiv","newGameButton","generalBoardDiv","activePlayerGameboard","activePlayerBoard","opponentGameboard","opponentBoard","opponentShips","body","optionsBtn","closeEventListener","optionsBtnMenu","newGameRow","restartGameRow","restartGameDialog","warningSymbol","warningText","appendChild","restartGameDialogBtnsDiv","confirmNoBtn","confirmYesBtn","player1Ships","player2Ships","player1Board","player2Board","attackTurn","firstHit","hitButNotSunkShips","tryingToSink","ids","containsID","response","idArray","item","menuCloseEvent","CustomEvent","closeMenu","dispatchEvent","stopPropagation","removeEventListener","createAndAddOptionsButton","infoDiv","infoDivPlayersDiv","infoDivPlayersActivePlayerLine1","infoDivPlayersActivePlayerLine2","infoDivPlayersOpponentLine1","infoDivPlayersOpponentLine2","infoDivTextDiv","infoDivTextDivFirstLine","infoDivTextDivSecondLine","infoDivTextDivThirdLine","infoDivTextDivFourthLine","infoDivTextDivTop","join","result","sinkTextDiv","sinkText1","sinkText2","infoDivTextDivBottom","nextTurnOKBtn","initiateNextTurn","computerPlayer","humanPlayer","humanPlayerGameboard","humanPlayerBoard","computerAttack","first","second","generateRandomCoordinates","generatePossibleAttacksFromPreviousHit","previousHitCoordinates","previousHitRow","previousHitColumn","rightAttack","leftAttack","upAttack","downAttack","randomCoordinates","possibleAttacks","indexOf","randomIndex","randomAttack","lastAttackRow","lastAttackColumn","firstHitRow","firstHitColumn","nextCoordinates","hitShipSquares","firstHitShipSquare","secondHitShipSquare","humanPlayerShips","nonSunkHumanPlayerShips","smallestShipFirstArray","firstShipInSmallShipArray","unshift","smallestShipFirstArrayShip","smallestShip","possiblePositionsCanFitAtLeastOneSmallestShip","coordinates","coordinatePossiblePositionsObject","coordinatePossiblePositions","currentPossiblePosition","invalidCoordinates","hitShipIndex","splice","nextShip","hitButNotSunkSquares","computer","infoDivTextDivTop1","infoDivTextDivTop2","gameOverDiv","gameOverButtonsDiv","computerMissedShips","computerMissedShipsHits","setTimeout","undefined","infoDivNextTurn","waitSquares","gameOverText1","gameOverText2","playAgainOKBtn","changePlayersBtn","opponentSection","opponentSectionH2","generalBoardDiv1","opponentColumnLabels","opponentRowLabels","opponentBoardDiv","activePlayerSection","activePlayerSectionH2","generalBoardDiv2","activePlayerColumnLabels","activePlayerRowLabels","activePlayerBoardDiv","matchingID","opponentSquares","attackSquare","selectedRow","selectedColumn","lastElementChild","attackedSquareRow","attackedSquareColumn","attackedSquare","idSquares","bottomDivText","emptySquareDiv","shipDiv","nextPlayerTurnDialog","nextPlayerTurnDialogDiv","activePlayerName","clonedActivePlayerName","clonedActivePlayerName2","opponentName","line2","line3","nextPlayerTurnDialogButtons","lastTurnDialog","lastTurnDialogDiv","lastTurnLine1","lastTurnDialogOpponentName","lastTurnLine2","lastTurnLine3","lastTurnLine4","lastTurnOKBtnDiv","lastTurnOKBtn"],"sourceRoot":""}